<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2015-09-17T11:49:00Z</updated>
  <entry>
    <title>Single-page web apps with Vaadin Spring 1.0</title>
    <link rel="alternate" href="https://spring.io/blog/2015/09/17/single-page-web-apps-with-vaadin-spring-1-0" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Stéphane Nicoll</name>
    </author>
    <id>tag:spring.io,2015-09-08:2230</id>
    <updated>2015-09-17T11:49:00Z</updated>
    <content type="html">&lt;blockquote&gt;&lt;p&gt;This post is a guest post by community member &lt;a href="https://twitter.com/MattiTahvonen"&gt;Matti Tahvonen (@MattiTahvonen)&lt;/a&gt;, who works as a developer advocate in &lt;a href="https://vaadin.com"&gt;Vaadin Ltd&lt;/a&gt;, the company that originally developed Vaadin Framework and provides commercial services and extensions for it.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;The Spring integration library for Vaadin has been in beta stage since May and has already been used by several production applications. Today we are proud to announce that the beta flag is dropped and the stable 1.0.0 release is out.&lt;/p&gt;&lt;p&gt;&lt;a href="https://vaadin.com/"&gt;Vaadin&lt;/a&gt; is a component based web UI framework where your application state and logic lives in the memory of your Java application server. This architecture gives you the full powers of JVM and frameworks like Spring to your UI code, and especially the huge advantage of keeping your UI logic right next to your data. Due to the strong abstraction and the component based API, familiar from desktop UI libraries, you can pretty much forget that you are actually working with a web application and concentrate on your domain problems only.&lt;/p&gt;&lt;p&gt;Vaadin is not the tool for each and every web site, but if you are building single-page web applications that need more than just some simple forms, you should definitely have Vaadin in your toolbox. If you are new to Vaadin and wondering how it works behind the scenes, check out &lt;a href="https://vaadin.com/introduction#why"&gt;the introduction page&lt;/a&gt; for a more detailed explanation.&lt;/p&gt;&lt;p&gt;As a pure Java library, Vaadin has always been easy to fit into a Spring based software stack. With the recently released official Vaadin Spring integration library, it becomes even easier. Just by marking your UI objects with an annotation, they become Spring managed beans, making it trivial to use IoC techniques and wire e.g. Spring Data based services directly to your UI classes. Vaadin Spring naturally supports Spring Boot, but can be used in old school Spring deployments as well.&lt;/p&gt;&lt;h2&gt;&lt;a href="#how-to-get-started-with-spring-and-vaadin" class="anchor" name="how-to-get-started-with-spring-and-vaadin"&gt;&lt;/a&gt;How to get started with Spring and Vaadin?&lt;/h2&gt;&lt;p&gt;For an easy start with new Spring + Vaadin projects, the &lt;a href="http://start.spring.io"&gt;start.spring.io&lt;/a&gt; service supports the Vaadin Spring integration library. Just tap the Vaadin checkbox there and import the generated project to your favorite IDE. Try the following code snippet for a simple Spring Boot based hello world application:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
public class DemoApplication {&#xD;
&#xD;
  public static void main(String[] args) {&#xD;
    SpringApplication.run(DemoApplication.class, args);&#xD;
  }&#xD;
&#xD;
  @Service&#xD;
  public static class MyService {&#xD;
    public String sayHi() {&#xD;
      return &amp;quot;Hello Spring!&amp;quot;;&#xD;
    }&#xD;
  }&#xD;
&#xD;
  @Theme(&amp;quot;valo&amp;quot;)&#xD;
  @SpringUI(path = &amp;quot;&amp;quot;)&#xD;
  public static class VaadinUI extends UI {&#xD;
&#xD;
    @Autowired&#xD;
    MyService myService;&#xD;
&#xD;
    @Override&#xD;
    protected void init(VaadinRequest request) {&#xD;
      Button button = new Button(&amp;quot;Greet service&amp;quot;);&#xD;
      button.addClickListener(e -&amp;gt; Notification.show(myService.sayHi()));&#xD;
      setContent(button);&#xD;
    }&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For more tips on how to go forward with your Spring + Vaadin based software strategy, see &lt;a href="https://vaadin.com/spring"&gt;vaadin.com/spring&lt;/a&gt; and our recent &lt;a href="https://www.youtube.com/watch?v=3ibM46HYB-k"&gt;introduction webinar&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>First Milestone of Spring Cloud Brixton Release Train is Available</title>
    <link rel="alternate" href="https://spring.io/blog/2015/09/16/first-milestone-of-spring-cloud-brixton-release-train-is-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Spencer Gibb</name>
    </author>
    <id>tag:spring.io,2015-09-11:2235</id>
    <updated>2015-09-16T04:06:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the Spring Cloud team, I am pleased to announce the first milestone of the &lt;a href="http://projects.spring.io/spring-cloud/"&gt;Spring Cloud&lt;/a&gt; Brixton release train. The milestone is available today and can be found in our &lt;a href="http://repo.spring.io/milestone"&gt;Spring Milestone repository&lt;/a&gt;. We’ve made numerous enhancements and bug fixes, some of the highlights include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Boot 1.3.x and Spring 4.2.x support&lt;/li&gt;
  &lt;li&gt;Cluster Leadership election and locks&lt;/li&gt;
  &lt;li&gt;Hashicorp Consul support for service registration/discovery, configuration and bus&lt;/li&gt;
  &lt;li&gt;Apache Zookeeper support for service registration/discovery, configuration and leader election&lt;/li&gt;
  &lt;li&gt;Lattice support for service registration/discovery&lt;/li&gt;
  &lt;li&gt;Distributed tracing support&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The following are new modules in Brixton.M1:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Cloud for Cloud Foundry 1.0.0.M1&lt;/li&gt;
  &lt;li&gt;Spring Cloud Cluster 1.0.0.M1&lt;/li&gt;
  &lt;li&gt;Spring Cloud Consul 1.0.0.M2&lt;/li&gt;
  &lt;li&gt;Spring Cloud Lattice 1.0.0.M1&lt;/li&gt;
  &lt;li&gt;Spring Cloud Sleuth 1.0.0.M1&lt;/li&gt;
  &lt;li&gt;Spring Cloud Zookeeper 1.0.0.M1&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The following modules have been updated:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Cloud Commons 1.1.0.M1&lt;/li&gt;
  &lt;li&gt;Spring Cloud Config 1.1.0.M1&lt;/li&gt;
  &lt;li&gt;Spring Cloud Netflix 1.1.0.M1&lt;/li&gt;
  &lt;li&gt;Spring Cloud Security 1.1.0.M1&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Spring Cloud AWS and Spring Cloud Bus did not get a new release in this milestone.&lt;/p&gt;&lt;p&gt;To get started with Maven with a parent POM:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;parent&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-cloud-starter-parent&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;Brixton.M1&amp;lt;/version&amp;gt;&#xD;
&amp;lt;/parent&amp;gt;&#xD;
&amp;lt;repositories&amp;gt;&#xD;
    &amp;lt;repository&amp;gt;&#xD;
        &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;&#xD;
        &amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt;&#xD;
        &amp;lt;url&amp;gt;http://repo.spring.io/milestone&amp;lt;/url&amp;gt;&#xD;
        &amp;lt;snapshots&amp;gt;&#xD;
            &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;&#xD;
        &amp;lt;/snapshots&amp;gt;&#xD;
    &amp;lt;/repository&amp;gt;&#xD;
&amp;lt;/repositories&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or as a BOM (dependency management only)&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;repositories&amp;gt;&#xD;
    &amp;lt;repository&amp;gt;&#xD;
        &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;&#xD;
        &amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt;&#xD;
        &amp;lt;url&amp;gt;http://repo.spring.io/milestone&amp;lt;/url&amp;gt;&#xD;
        &amp;lt;snapshots&amp;gt;&#xD;
            &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;&#xD;
        &amp;lt;/snapshots&amp;gt;&#xD;
    &amp;lt;/repository&amp;gt;&#xD;
&amp;lt;/repositories&amp;gt;&#xD;
&amp;lt;dependencyManagement&amp;gt;&#xD;
  &amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-parent&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;version&amp;gt;Brixton.M1&amp;lt;/version&amp;gt;&#xD;
    &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
    &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
  &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/dependencyManagement&amp;gt;&#xD;
&amp;lt;dependencies&amp;gt;&#xD;
  &amp;lt;dependency&amp;gt;&#xD;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-config&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;/dependency&amp;gt;&#xD;
  &amp;lt;dependency&amp;gt;&#xD;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-eureka&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;/dependency&amp;gt;&#xD;
  ...&#xD;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or with gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;buildscript {&#xD;
  dependencies {&#xD;
    classpath &amp;quot;io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE&amp;quot;&#xD;
  }&#xD;
}&#xD;
repositories {&#xD;
    maven {&#xD;
        url &amp;#39;http://repo.spring.io/milestone&amp;#39;&#xD;
    }&#xD;
}&#xD;
apply plugin: &amp;quot;io.spring.dependency-management&amp;quot;&#xD;
&#xD;
dependencyManagement {&#xD;
  imports {&#xD;
    mavenBom &amp;#39;org.springframework.cloud:spring-cloud:Brixton.M1&amp;#39;&#xD;
  }&#xD;
}&#xD;
&#xD;
dependencies {&#xD;
    compile &amp;#39;org.springframework.cloud:spring-cloud-starter-config&amp;#39;&#xD;
    compile &amp;#39;org.springframework.cloud:spring-cloud-starter-eureka&amp;#39;&#xD;
    ...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;a href="#springone-2gx-2015-is-here" class="anchor" name="springone-2gx-2015-is-here"&gt;&lt;/a&gt;SpringOne 2GX 2015 is here!&lt;/h1&gt;&lt;p&gt;&lt;a href="http://www.springone2gx.com"&gt;SpringOne2GX in Washington, DC&lt;/a&gt; is going on right now. It&amp;rsquo;s simply the best opportunity to find out first hand all that&amp;rsquo;s going on and to provide direct feedback.&lt;/p&gt;&lt;h1&gt;&lt;a href="#spring-cloud-talks-at-springone" class="anchor" name="spring-cloud-talks-at-springone"&gt;&lt;/a&gt;Spring Cloud talks at SpringOne&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://2015.event.springone2gx.com/schedule/sessions/getting_started_with_spring_cloud.html"&gt;Getting Started with Spring Cloud&lt;/a&gt; by &lt;a href="https://spring.io/team/jlong"&gt;Josh Long&lt;/a&gt; and &lt;a href="https://spring.io/team/dsyer"&gt;Dave Syer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://2015.event.springone2gx.com/schedule/sessions/developer_experience_with_spring_cloud.html"&gt;Developer Experience with Spring Cloud&lt;/a&gt; by &lt;a href="https://spring.io/team/dsyer"&gt;Dave Syer&lt;/a&gt; and &lt;a href="https://spring.io/team/spencergibb"&gt;Spencer Gibb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://2015.event.springone2gx.com/schedule/sessions/spring_cloud_at_netflix.html"&gt;Spring Cloud at Netflix&lt;/a&gt; by &lt;a href="https://2015.event.springone2gx.com/presenters/jon_schneider.html"&gt;Jon Schneider&lt;/a&gt; and &lt;a href="https://2015.event.springone2gx.com/presenters/taylor_wicksell.html"&gt;Taylor Wicksell&lt;/a&gt; from Netflix&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://2015.event.springone2gx.com/schedule/sessions/cloud_native_java_with_spring_cloud_services.html"&gt;Cloud Native Java with Spring Cloud Services &lt;/a&gt; by &lt;a href="https://spring.io/team/scottfrederick"&gt;Scott Frederick&lt;/a&gt; and &lt;a href="https://spring.io/team/cwalls"&gt;Craig Walls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://2015.event.springone2gx.com/schedule/sessions/securing_microservices_with_spring_cloud_security.html"&gt;Securing Microservices with Spring Cloud Security&lt;/a&gt; by &lt;a href="https://2015.event.springone2gx.com/presenters/will_tran.html"&gt;Willl Tran&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://2015.event.springone2gx.com/schedule/sessions/spring_cloud_exploring_alternative_spring_cloud_implementations.html"&gt;Spring Cloud *: Exploring Alternative Spring Cloud Implementations&lt;/a&gt; by &lt;a href="https://spring.io/team/spencergibb"&gt;Spencer Gibb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.meetup.com/dc-jug/events/225238964/"&gt;Getting started with Spring Cloud (DCJUG)&lt;/a&gt; by &lt;a href="https://spring.io/team/spencergibb"&gt;Spencer Gibb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - September 15th, 2015 - SpringOne2GX 2015 edition!</title>
    <link rel="alternate" href="https://spring.io/blog/2015/09/16/this-week-in-spring-september-15th-2015-springone2gx-2015-edition" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-09-16:2237</id>
    <updated>2015-09-16T03:49:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week, we&amp;rsquo;re in beautiful Washington DC &lt;a href="http://www.springone2gx.com/"&gt;for the amazing SpringOne2GX 2015&lt;/a&gt;!&lt;/p&gt;&lt;p&gt;It&amp;rsquo;s been an &lt;em&gt;amazing&lt;/em&gt; event packed with amazing, &lt;em&gt;pivotal&lt;/em&gt; moments that saw more than a thousand attendees - including engineers from some of the largest websites in the world - Rakuten, Alibaba, and Netflix, among others - join us here in Washington DC to learn and love what Pivotal is doing with and around Spring.&lt;/p&gt;&lt;p&gt;Here are some of my favorite moments:&lt;/p&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/joshlong/meh/master/s2gx2015_5.png" alt="get cloud native" /&gt;&lt;br/&gt; * this year saw Pivotal take cloud-native further and faster than anyone and SpringOne2GX has been a huge celebration of this drive: GET CLOUD NATIVE.&lt;/p&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/joshlong/meh/master/s2gx2015_6.png" alt="day 2 keynote with Juergen Hoeller and JUnit" /&gt;&lt;br/&gt; * Spring framework lead and co-founder Juergen Hoeller announces Pivotal&amp;rsquo;s crowdfunding support of JUnit during the first keynote.&lt;/p&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/joshlong/meh/master/s2gx2015_8.png" alt="Dr. Syer and I gave the Spring Cloud 101 talk here at SpringOne2GX 2015." /&gt;&lt;br/&gt;* Some of you will recall that I had the utter privilege of giving &lt;a href="http://twitter.com/springrod"&gt;Dr. Rod Johnson&lt;/a&gt;, the founder and father of Spring, his first in-depth Spring Boot and Spring Cloud walk throughs a few weeks ago. He loved it!&lt;/p&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/joshlong/meh/master/s2gx2015_4.png" alt="Dr. Syer, Rod Johnson, and I" /&gt;&lt;br/&gt;* So, Spring Boot and Spring Cloud co-founder Dr. Dave Syer and I were doubly pleased to have Rod accept an invitation at this year&amp;rsquo;s SpringOne2GX - his first in five years - to say a few words about how Spring Boot and Spring Cloud connect and further his original vision for Spring before Dave and I spoke at our talk introducing Spring Cloud today at SpringOne2GX! This is my favorite photo, ever. THANK YOU, Dave and Rod.&lt;/p&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/joshlong/meh/master/s2gx2015_3.png" alt="the big-data dream team" /&gt;&lt;br/&gt;* some of the Spring big-data dream team at SpringOne2GX: Sabby Anandan, Gary Russell, Mark Fisher, Dr. Mark Pollack, and Thomas Risberg!&lt;/p&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/joshlong/meh/master/s2gx2015_2.png" alt="the day 2 keynote" /&gt;&lt;br/&gt;* &lt;a href="https://spring.io/team/mfisher"&gt;Mark Fisher&lt;/a&gt;, yours truly, and &lt;a href="https://spring.io/team/scottfrederick"&gt;Scott Frederick&lt;/a&gt; along with &lt;a href="https://spring.io/team/dsyer"&gt;Dr. Dave Syer&lt;/a&gt; (unpictured) during the day 2 keynote.&lt;/p&gt;&lt;p&gt;Alright, without further ado! Let&amp;rsquo;s get on to this week&amp;rsquo;s roundup!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring XD product manager Sabby Anandan wrote up a &lt;a href="http://blog.pivotal.io/pivotal-cloud-foundry/products/introducing-spring-cloud-data-flow"&gt;very nice blog on Spring Cloud Dataflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Integration lead Gary Russell has just &lt;a href="http://spring.io/blog/2015/09/10/spring-integration-4-2-release-is-available"&gt;announced Spring Integration 4.2 is now available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Not one to rest on his laurels, Gary &lt;em&gt;also&lt;/em&gt; &lt;a href="http://spring.io/blog/2015/09/10/spring-amqp-1-5-0-release-available"&gt;just announced Spring AMQP 1.5.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Integration ninja Artem Bilan also just &lt;a href="http://spring.io/blog/2015/09/10/spring-integration-java-dsl-1-1-m2-is-available"&gt;announced that the Spring Integration Java configuration DSL 1.1.M2 is now available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Andy Wilkinson has just &lt;a href="http://spring.io/blog/2015/09/08/spring-rest-docs-1-0-0-rc1"&gt;announced that Spring REST Docs 1.0.0.RC1 is now available&lt;/a&gt;&lt;br/&gt;*&lt;/li&gt;
  &lt;li&gt;Spring ninja Greg Turnquist just published part two in his &lt;a href="http://spring.io/blog/2015/09/15/react-js-and-spring-data-rest-part-2-hypermedia"&gt;series on using React.js and Spring Data REST&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Hüseyin Babal has put together a nice tutorial &lt;a href="http://code.tutsplus.com/tutorials/build-a-real-time-chat-application-with-modulus-and-spring-boot--cms-22513"&gt;on building a websocket application using Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;John Thompson has written a very detailed look at using &lt;a href="https://dzone.com/articles/configuring-spring-boot-for-oracle"&gt;an Oracle database from Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;Spring Framework Guru&lt;/em&gt; website has a published &lt;a href="https://springframework.guru/spring-boot-web-application-part-4-spring-mvc/"&gt;the fourth installment of a tutorial on building web applications using Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;Spring Framework Guru&lt;/em&gt; author &lt;em&gt;also&lt;/em&gt; published a nice video on using Spring Boot with Thymeleaf.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NN_hSBEYBVE"&gt;https://www.youtube.com/watch?v=NN_hSBEYBVE&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This Chinese-language &lt;a href="http://samchu.logdown.com/posts/297038-use-quartz-in-spring-boot"&gt;post on using Quartz with Spring Boot looks amazing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/joshlong/spring-cloud-sloth"&gt;Sloths&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>React.js and Spring Data REST: Part 2 - Hypermedia</title>
    <link rel="alternate" href="https://spring.io/blog/2015/09/15/react-js-and-spring-data-rest-part-2-hypermedia" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Greg Turnquist</name>
    </author>
    <id>tag:spring.io,2015-09-15:2236</id>
    <updated>2015-09-15T13:34:00Z</updated>
    <content type="html">&lt;div id="preamble"&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;In the &lt;a href="https://spring.io/blog/2015/09/01/react-js-and-spring-data-rest-part-1-basic-features"&gt;previous session&lt;/a&gt;, you found out how to stand up a backend payroll service to store employee data using Spring Data REST. A key feature it lacked was using the hypermedia controls and navigation by links. Instead, it hard coded the path to find data.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Feel free to &lt;a href="https://github.com/gregturn/react-and-spring-data-rest/tree/master/hypermedia"&gt;grab the code&lt;/a&gt; from this repository and follow along. This session is based on the previous session&amp;#8217;s app with extra things added.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_in_the_beginning_there_was_data_and_then_there_was_rest"&gt;In the beginning there was data&amp;#8230;&amp;#8203;and then there was REST&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="quoteblock"&gt;&#xD;
&lt;blockquote&gt;&#xD;
I am getting frustrated by the number of people calling any HTTP-based interface a REST API. Today’s example is the SocialSite REST API. That is RPC. It screams RPC&amp;#8230;&amp;#8203;.What needs to be done to make the REST architectural style clear on the notion that hypertext is a constraint? In other words, if the engine of application state (and hence the API) is not being driven by hypertext, then it cannot be RESTful and cannot be a REST API. Period. Is there some broken manual somewhere that needs to be fixed?&#xD;
&lt;/blockquote&gt;&#xD;
&lt;div class="attribution"&gt;&#xD;
&amp;#8212; &lt;a href="http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven"&gt;Roy T. Fielding&lt;/a&gt;&lt;br&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;So, what exactly ARE hypermedia controls, i.e. hypertext, and how can you use them? To find out, let&amp;#8217;s take a step back and look at the core mission of REST.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;The concept of REST was to borrow ideas that made the web so successful and apply them to APIs. Despite the web&amp;#8217;s vast size, dynamic nature, and low rate that clients, i.e. browsers, are updated, the web is an amazing success. Roy Fielding sought to use some of its constraints and features and see if that would afford similar expansion of API production and consumption.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;One of the constraints is to limit the number of verbs. For REST, the primary ones are GET, POST, PUT, DELETE, and PATCH. There are others, but we won&amp;#8217;t get into them here.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="ulist"&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;&#xD;
GET - fetch the state of a resource without altering the system&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
POST - create a new resource without saying where&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
PUT - replace an existing resource, overwriting whatever else is already there (if anything)&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
DELETE - remove an existing resource&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
PATCH - alter an existing resource partially&#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;These are standardized HTTP verbs with well written specs. By picking up and using already coined HTTP operations, we don&amp;#8217;t have to invent a new language and educate the industry.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Another constraint of REST is to use media types to define the format of data. Instead of everyone writing their own dialect for the exchange of information, it would be prudent to develop some media types. One of the most popular ones to be accepted is HAL, media type application/hal+json. It is Spring Data REST&amp;#8217;s default media type. A keen value is that there is no centralized, single media type for REST. Instead, people can develop media types and plug them in. Try them out. As different needs become available, the industry can flexibly move.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;A key feature of REST is to include links to relevant resources. For example, if you were looking at an order, a RESTful API would include a link to the related customer, links to the catalog of items, and perhaps a link to the store from which the order was placed. In this session, you will introduce paging, and see how to also use navigational paging links.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_turning_on_paging_from_the_backend"&gt;Turning on paging from the backend&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;To get underway with using frontend hypermedia controls, you need to turn on some extra controls. Spring Data REST provides paging support. To use it, just tweak the repository definition:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="title"&gt;src/main/java/com/greglturnquist/payroll/EmployeeRepository.java&lt;/div&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;public interface EmployeeRepository extends PagingAndSortingRepository&amp;lt;Employee, Long&amp;gt; {&#xD;
&#xD;
}&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Your interface now extends &lt;code&gt;PagingAndSortingRepository&lt;/code&gt; which adds extra options to set page size, and also adds navigational links to hop from page to page. The rest of the backend is the same (exception for some &lt;a href="https://github.com/gregturn/react-and-spring-data-rest/blob/master/hypermedia/src/main/java/com/greglturnquist/payroll/DatabaseLoader.java"&gt;extra pre-loaded data&lt;/a&gt; to make things interesting).&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Restart the application (&lt;code&gt;./mvnw spring-boot:run&lt;/code&gt;) and see how it works.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre&gt;$ curl localhost:8080/api/employees?size=2&#xD;
{&#xD;
  "_links" : {&#xD;
    "first" : {&#xD;
      "href" : "http://localhost:8080/api/employees?page=0&amp;amp;size=2"&#xD;
    },&#xD;
    "self" : {&#xD;
      "href" : "http://localhost:8080/api/employees"&#xD;
    },&#xD;
    "next" : {&#xD;
      "href" : "http://localhost:8080/api/employees?page=1&amp;amp;size=2"&#xD;
    },&#xD;
    "last" : {&#xD;
      "href" : "http://localhost:8080/api/employees?page=2&amp;amp;size=2"&#xD;
    }&#xD;
  },&#xD;
  "_embedded" : {&#xD;
    "employees" : [ {&#xD;
      "firstName" : "Frodo",&#xD;
      "lastName" : "Baggins",&#xD;
      "description" : "ring bearer",&#xD;
      "_links" : {&#xD;
        "self" : {&#xD;
          "href" : "http://localhost:8080/api/employees/1"&#xD;
        }&#xD;
      }&#xD;
    }, {&#xD;
      "firstName" : "Bilbo",&#xD;
      "lastName" : "Baggins",&#xD;
      "description" : "burglar",&#xD;
      "_links" : {&#xD;
        "self" : {&#xD;
          "href" : "http://localhost:8080/api/employees/2"&#xD;
        }&#xD;
      }&#xD;
    } ]&#xD;
  },&#xD;
  "page" : {&#xD;
    "size" : 2,&#xD;
    "totalElements" : 6,&#xD;
    "totalPages" : 3,&#xD;
    "number" : 0&#xD;
  }&#xD;
}&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;The default page size is 20, so to see it in action, &lt;code&gt;?size=2&lt;/code&gt; applied. As expected, only two employees are listed. In addition, there is also a &lt;strong&gt;first&lt;/strong&gt;, &lt;strong&gt;next&lt;/strong&gt;, and &lt;strong&gt;last&lt;/strong&gt; link. There is also the &lt;strong&gt;self&lt;/strong&gt; link, free of context &lt;em&gt;including page parameters&lt;/em&gt;.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;If you navigate to the &lt;strong&gt;next&lt;/strong&gt; link, you&amp;#8217;ll then see a &lt;strong&gt;prev&lt;/strong&gt; link as well:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre&gt;$ curl "http://localhost:8080/api/employees?page=1&amp;amp;size=2"&#xD;
{&#xD;
  "_links" : {&#xD;
    "first" : {&#xD;
      "href" : "http://localhost:8080/api/employees?page=0&amp;amp;size=2"&#xD;
    },&#xD;
    "prev" : {&#xD;
      "href" : "http://localhost:8080/api/employees?page=0&amp;amp;size=2"&#xD;
    },&#xD;
    "self" : {&#xD;
      "href" : "http://localhost:8080/api/employees"&#xD;
    },&#xD;
    "next" : {&#xD;
      "href" : "http://localhost:8080/api/employees?page=2&amp;amp;size=2"&#xD;
    },&#xD;
    "last" : {&#xD;
      "href" : "http://localhost:8080/api/employees?page=2&amp;amp;size=2"&#xD;
    }&#xD;
  },&#xD;
...&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="admonitionblock note"&gt;&#xD;
&lt;table&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="icon"&gt;&#xD;
&lt;div class="title"&gt;Note&lt;/div&gt;&#xD;
&lt;/td&gt;&#xD;
&lt;td class="content"&gt;&#xD;
When using "&amp;amp;" in URL query parameters, the command line thinks it&amp;#8217;s a line break. Wrap the whole URL with quotation marks to bypass that.&#xD;
&lt;/td&gt;&#xD;
&lt;/tr&gt;&#xD;
&lt;/table&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;That looks neat, but it will be even better when you update the frontend to take advantage of that.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_navigating_by_relationship"&gt;Navigating by relationship&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;That&amp;#8217;s it! No more changes are needed on the backend to start using the hypermedia controls Spring Data REST provides out of the box. You can switch to working on the frontend. (That&amp;#8217;s part of the beauty of Spring Data REST. No messy controller updates!)&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="admonitionblock note"&gt;&#xD;
&lt;table&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="icon"&gt;&#xD;
&lt;div class="title"&gt;Note&lt;/div&gt;&#xD;
&lt;/td&gt;&#xD;
&lt;td class="content"&gt;&#xD;
It&amp;#8217;s important to point out, this application isn&amp;#8217;t "Spring Data REST-specific." Instead, it uses &lt;a href="http://stateless.co/hal_specification.html"&gt;HAL&lt;/a&gt;, &lt;a href="https://tools.ietf.org/html/rfc6570"&gt;URI Templates&lt;/a&gt;, and other standards. That&amp;#8217;s how using rest.js is a snap: that library comes with HAL support.&#xD;
&lt;/td&gt;&#xD;
&lt;/tr&gt;&#xD;
&lt;/table&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;In the previous session, you hardcoded the path to &lt;code&gt;/api/employees&lt;/code&gt;. Instead, the ONLY path you should hardcode is the root.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;...&#xD;
var root = '/api';&#xD;
...&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;With a handy little &lt;a href="https://github.com/gregturn/react-and-spring-data-rest/blob/master/hypermedia/src/main/resources/static/follow.js"&gt;&lt;code&gt;follow()&lt;/code&gt; function&lt;/a&gt;, you can now start from the root and navigate to where you need!&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;componentDidMount: function () {&#xD;
    this.loadFromServer(this.state.pageSize);&#xD;
},&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;In the previous session, the loading was done directly inside &lt;code&gt;componentDidMount()&lt;/code&gt;. In this session, we are making it possible to reload the entire list of employees when the page size is updated. To do so, we have moved things into &lt;code&gt;loadFromServer()&lt;/code&gt;.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;loadFromServer: function (pageSize) {&#xD;
    follow(client, root, [&#xD;
        {rel: 'employees', params: {size: pageSize}}]&#xD;
    ).then(employeeCollection =&amp;gt; {&#xD;
        return client({&#xD;
            method: 'GET',&#xD;
            path: employeeCollection.entity._links.profile.href,&#xD;
            headers: {'Accept': 'application/schema+json'}&#xD;
        }).then(schema =&amp;gt; {&#xD;
            this.schema = schema.entity;&#xD;
            return employeeCollection;&#xD;
        });&#xD;
    }).done(employeeCollection =&amp;gt; {&#xD;
        this.setState({&#xD;
            employees: employeeCollection.entity._embedded.employees,&#xD;
            attributes: Object.keys(this.schema.properties),&#xD;
            pageSize: pageSize,&#xD;
            links: employeeCollection.entity._links});&#xD;
    });&#xD;
},&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;&lt;code&gt;loadFromServer&lt;/code&gt; is very similar the previous session, but instead if uses &lt;code&gt;follow()&lt;/code&gt;:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="ulist"&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;&#xD;
The first argument to the follow() function is the &lt;code&gt;client&lt;/code&gt; object used to make REST calls.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
The second argument is the root URI to start from.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
The third argument is an array of relationships to navigate along. Each one can be a string or an object.&#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;The array of relationships can be as simple as &lt;code&gt;["employees"]&lt;/code&gt;, meaning when the first call is made, look in &lt;strong&gt;_links&lt;/strong&gt; for the relationship (or &lt;strong&gt;rel&lt;/strong&gt;) named &lt;strong&gt;employees&lt;/strong&gt;. Find its &lt;strong&gt;href&lt;/strong&gt; and navigate to it. If there is another relationship in the array, rinse and repeat.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Sometimes, a rel by itself isn&amp;#8217;t enough. In this fragment of code, it also plugs in a query parameter of &lt;strong&gt;?size=&amp;lt;pageSize&amp;gt;&lt;/strong&gt;. There are other options that can be supplied, as you&amp;#8217;ll see further along.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_grabbing_json_schema_metadata"&gt;Grabbing JSON Schema metadata&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;After navigating to &lt;strong&gt;employees&lt;/strong&gt; with the size-based query, the &lt;strong&gt;employeeCollection&lt;/strong&gt; is at your fingertips. In the previous session, we called it day and displayed that data inside &lt;code&gt;&amp;lt;EmployeeList /&amp;gt;&lt;/code&gt;. Today, you are performing another call to grab some &lt;a href="http://json-schema.org/"&gt;JSON Schema metadata&lt;/a&gt; found a &lt;code&gt;/api/profile/employees&lt;/code&gt;.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;You can see the data yourself:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre&gt;$ curl http://localhost:8080/api/profile/employees -H 'Accept:application/schema+json'&#xD;
{&#xD;
  "title" : "Employee",&#xD;
  "properties" : {&#xD;
    "firstName" : {&#xD;
      "title" : "First name",&#xD;
      "readOnly" : false,&#xD;
      "type" : "string"&#xD;
    },&#xD;
    "lastName" : {&#xD;
      "title" : "Last name",&#xD;
      "readOnly" : false,&#xD;
      "type" : "string"&#xD;
    },&#xD;
    "description" : {&#xD;
      "title" : "Description",&#xD;
      "readOnly" : false,&#xD;
      "type" : "string"&#xD;
    }&#xD;
  },&#xD;
  "definitions" : { },&#xD;
  "type" : "object",&#xD;
  "$schema" : "http://json-schema.org/draft-04/schema#"&#xD;
}&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="admonitionblock note"&gt;&#xD;
&lt;table&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="icon"&gt;&#xD;
&lt;div class="title"&gt;Note&lt;/div&gt;&#xD;
&lt;/td&gt;&#xD;
&lt;td class="content"&gt;&#xD;
The default form of metadata at /profile/employees is ALPS. In this case, though, you are using content negotation to fetch JSON Schema.&#xD;
&lt;/td&gt;&#xD;
&lt;/tr&gt;&#xD;
&lt;/table&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;By capturing this information in the`&amp;lt;App /&amp;gt;` component&amp;#8217;s state, you can make good use of it later on when building input forms.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="creating-new-records"&gt;Creating new records&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Equipped with this metadata, you can now add some extra controls to the UI. Create a new React component, &lt;code&gt;&amp;lt;CreateDialog /&amp;gt;&lt;/code&gt;.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;var CreateDialog = React.createClass({&#xD;
&#xD;
    handleSubmit: function (e) {&#xD;
        e.preventDefault();&#xD;
        var newEmployee = {};&#xD;
        this.props.attributes.forEach(attribute =&amp;gt; {&#xD;
            newEmployee[attribute] = React.findDOMNode(this.refs[attribute]).value.trim();&#xD;
        });&#xD;
        this.props.onCreate(newEmployee);&#xD;
&#xD;
        // clear out the dialog's inputs&#xD;
        this.props.attributes.forEach(attribute =&amp;gt; {&#xD;
            React.findDOMNode(this.refs[attribute]).value = '';&#xD;
        });&#xD;
&#xD;
        // Navigate away from the dialog to hide it.&#xD;
        window.location = "#";&#xD;
    },&#xD;
&#xD;
    render: function () {&#xD;
        var inputs = this.props.attributes.map(attribute =&amp;gt;&#xD;
            &amp;lt;p key={attribute}&amp;gt;&#xD;
                &amp;lt;input type="text" placeholder={attribute} ref={attribute} className="field" /&amp;gt;&#xD;
            &amp;lt;/p&amp;gt;&#xD;
        );&#xD;
&#xD;
        return (&#xD;
            &amp;lt;div&amp;gt;&#xD;
                &amp;lt;a href="#createEmployee"&amp;gt;Create&amp;lt;/a&amp;gt;&#xD;
&#xD;
                &amp;lt;div id="createEmployee" className="modalDialog"&amp;gt;&#xD;
                    &amp;lt;div&amp;gt;&#xD;
                        &amp;lt;a href="#" title="Close" className="close"&amp;gt;X&amp;lt;/a&amp;gt;&#xD;
&#xD;
                        &amp;lt;h2&amp;gt;Create new employee&amp;lt;/h2&amp;gt;&#xD;
&#xD;
                        &amp;lt;form&amp;gt;&#xD;
                            {inputs}&#xD;
                            &amp;lt;button onClick={this.handleSubmit}&amp;gt;Create&amp;lt;/button&amp;gt;&#xD;
                        &amp;lt;/form&amp;gt;&#xD;
                    &amp;lt;/div&amp;gt;&#xD;
                &amp;lt;/div&amp;gt;&#xD;
            &amp;lt;/div&amp;gt;&#xD;
        )&#xD;
    }&#xD;
&#xD;
});&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;This new component has both a &lt;code&gt;handleSubmit()&lt;/code&gt; function as well as the expected &lt;code&gt;render()&lt;/code&gt; function.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Let&amp;#8217;s dig into these functions in reverse order, and first look at the &lt;code&gt;render()&lt;/code&gt; function.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="sect2"&gt;&#xD;
&lt;h3 id="hypermedia-rendering"&gt;Rendering&lt;/h3&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Your code maps over the JSON Schema data found in the &lt;strong&gt;attributes&lt;/strong&gt; property and converts it into an array of &lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;input&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="ulist"&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;&#xD;
&lt;strong&gt;key&lt;/strong&gt; is again needed by React to distinguish between multiple child nodes.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
It&amp;#8217;s a simple text-based entry field.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
&lt;strong&gt;placeholder&lt;/strong&gt; is where we can show the user with field is which.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
You may used to having a &lt;strong&gt;name&lt;/strong&gt; attribute, but it&amp;#8217;s not necessary. With React, &lt;strong&gt;ref&lt;/strong&gt; is the mechanism to grab a particular DOM node (as you&amp;#8217;ll soon see).&#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;This represents the dynamic nature of the component, driven by loading data from the server.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Inside this component&amp;#8217;s top-level &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is an anchor tag and another &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. The anchor tag is the button to open the dialog. And the nested &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is the hidden dialog itself. In this example, you are use pure HTML5 and CSS3. No JavaScript at all! You can &lt;a href="https://github.com/gregturn/react-and-spring-data-rest/blob/master/hypermedia/src/main/resources/static/main.css"&gt;see the CSS code&lt;/a&gt; used to show/hide the dialog. We won&amp;#8217;t dive into that here.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Nestled inside &lt;code&gt;&amp;lt;div id="createEmployee"&amp;gt;&lt;/code&gt; is a form where your dynamic list of input fields are injected followed by the &lt;strong&gt;Create&lt;/strong&gt; button. That button has an &lt;code&gt;onClick={this.handleSubmit}&lt;/code&gt; event handler. This is the React way of registering an event handler.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="admonitionblock note"&gt;&#xD;
&lt;table&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="icon"&gt;&#xD;
&lt;div class="title"&gt;Note&lt;/div&gt;&#xD;
&lt;/td&gt;&#xD;
&lt;td class="content"&gt;&#xD;
React doesn&amp;#8217;t create a fistful of event handlers on every DOM element. Instead, it has a &lt;a href="https://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html#under-the-hood-autobinding-and-event-delegation"&gt;much more performant and sophisticated&lt;/a&gt; solution. The point being you don&amp;#8217;t have to manage that infrastructure and can instead focus on writing functional code.&#xD;
&lt;/td&gt;&#xD;
&lt;/tr&gt;&#xD;
&lt;/table&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="sect2"&gt;&#xD;
&lt;h3 id="_handling_user_input"&gt;Handling user input&lt;/h3&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;The &lt;code&gt;handleSubmit()&lt;/code&gt; function first stops the event from bubbling further up the hierarchy. It then uses the same JSON Schema attribute property to find each &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; using &lt;code&gt;React.findDOMNode(this.refs[attribute])&lt;/code&gt;.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;&lt;code&gt;this.refs&lt;/code&gt; is a way to reach out and grab a particular React component by name. In that sense, you are ONLY getting the virtual DOM component. To grab the actual DOM element you need to use &lt;code&gt;React.findDOMNode()&lt;/code&gt;.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;After iterating over every input and building up the &lt;code&gt;newEmployee&lt;/code&gt; object, we invoke a callback to &lt;code&gt;onCreate()&lt;/code&gt; the new employee. This function is up top inside &lt;code&gt;App.onCreate&lt;/code&gt; and was provided to this React component as another property. Look at how that top-level function operates:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;onCreate: function (newEmployee) {&#xD;
    follow(client, root, ['employees']).then(employeeCollection =&amp;gt; {&#xD;
        return client({&#xD;
            method: 'POST',&#xD;
            path: employeeCollection.entity._links.self.href,&#xD;
            entity: newEmployee,&#xD;
            headers: {'Content-Type': 'application/json'}&#xD;
        })&#xD;
    }).then(response =&amp;gt; {&#xD;
        return follow(client, root, [&#xD;
            {rel: 'employees', params: {'size': this.state.pageSize}}]);&#xD;
    }).done(response =&amp;gt; {&#xD;
        this.onNavigate(response.entity._links.last.href);&#xD;
    });&#xD;
},&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Once again, use the &lt;code&gt;follow()&lt;/code&gt; function to navigate to the &lt;strong&gt;employees&lt;/strong&gt; resource where POST operations are performed. In this case, there was no need to apply any parameters, so the string-based array of rels is fine. In this situation, the POST call is returned. This allows the next &lt;code&gt;then()&lt;/code&gt; clause to handle processing the outcome of the POST.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;New records are typically added to the end of the dataset. Since you are looking at a certain page, it&amp;#8217;s logical to expect the new employee record to not be on the current page. To handle this, you need to fetch a new batch of data with the same page size applied. That promise is returned for the final clause inside &lt;code&gt;done()&lt;/code&gt;.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Since the user probably wants to see the newly created employee, you can then use the hypermedia controls and navigate to the &lt;strong&gt;last&lt;/strong&gt; entry.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;This introduces the concept of paging in our UI. Let&amp;#8217;s tackle that next!&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div id="NOTE" class="exampleblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;First time using a promise-based API? &lt;a href="https://promisesaplus.com/"&gt;Promises&lt;/a&gt; are a way to kick of asynchronous operations and then register a function to respond when the task is done. Promises are designed to be chained together to avoid "callback hell". Look at the following flow:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;when.promise(async_func_call())&#xD;
	.then(function(results) {&#xD;
		/* process the outcome of async_func_call */&#xD;
	})&#xD;
	.then(function(more_results) {&#xD;
		/* process the previous then() return value */&#xD;
	})&#xD;
	.done(function(yet_more) {&#xD;
		/* process the previous then() and wrap things up */&#xD;
	});&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;For more details, check out &lt;a href="http://know.cujojs.com/tutorials/promises/consuming-promises"&gt;this tutorial on promises&lt;/a&gt;.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;The secret thing to remember with promises is that &lt;code&gt;then()&lt;/code&gt; functions &lt;em&gt;need&lt;/em&gt; to return something, whether it&amp;#8217;s a value or another promise.  &lt;code&gt;done()&lt;/code&gt; functions do NOT return anything, and you don&amp;#8217;t chain anything after it. In case you haven&amp;#8217;t noticed yet, &lt;code&gt;client&lt;/code&gt; (which is an instance of &lt;code&gt;rest&lt;/code&gt; from rest.js) as well as the &lt;code&gt;follow&lt;/code&gt; function return promises.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_paging_through_data"&gt;Paging through data&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;You set up paging on the backend and have already starting taking advantage of it when creating new employees.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;In &lt;a href="#creating-new-records"&gt;the previous section&lt;/a&gt;, you used the page controls to jump to the &lt;strong&gt;last&lt;/strong&gt; page. It would be really handy to dynamically apply it to the UI and let the user navigate as desired. Adjusting the controls dynamically based on available navigation links would be great.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;First, let&amp;#8217;s check out the &lt;code&gt;onNavigate()&lt;/code&gt; function you used.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;onNavigate: function(navUri) {&#xD;
    client({method: 'GET', path: navUri}).done(employeeCollection =&amp;gt; {&#xD;
        this.setState({&#xD;
            employees: employeeCollection.entity._embedded.employees,&#xD;
            attributes: this.state.attributes,&#xD;
            pageSize: this.state.pageSize,&#xD;
            links: employeeCollection.entity._links&#xD;
        });&#xD;
    });&#xD;
},&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;This is defined at the top, inside &lt;code&gt;App.onNavigate&lt;/code&gt;. Again, this is to allow managing the state of the UI in the top component. After passing &lt;code&gt;onNavigate()&lt;/code&gt; down to the &lt;code&gt;&amp;lt;EmployeeList /&amp;gt;&lt;/code&gt; React component, the following handlers are coded up to handle clicking on some buttons:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;handleNavFirst: function(e){&#xD;
    e.preventDefault();&#xD;
    this.props.onNavigate(this.props.links.first.href);&#xD;
},&#xD;
handleNavPrev: function(e) {&#xD;
    e.preventDefault();&#xD;
    this.props.onNavigate(this.props.links.prev.href);&#xD;
},&#xD;
handleNavNext: function(e) {&#xD;
    e.preventDefault();&#xD;
    this.props.onNavigate(this.props.links.next.href);&#xD;
},&#xD;
handleNavLast: function(e) {&#xD;
    e.preventDefault();&#xD;
    this.props.onNavigate(this.props.links.last.href);&#xD;
},&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Each of these functions intercepts the default event and stops it from bubbling up. Then it invokes the &lt;code&gt;onNavigate()&lt;/code&gt; function with the proper hypermedia link.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Now conditionally display the controls based on which links appear in the hypermedia links in &lt;code&gt;EmployeeList.render&lt;/code&gt;:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;render: function () {&#xD;
    var employees = this.props.employees.map(employee =&amp;gt;&#xD;
        &amp;lt;Employee key={employee._links.self.href} employee={employee} onDelete={this.props.onDelete}/&amp;gt;&#xD;
    );&#xD;
&#xD;
    var navLinks = [];&#xD;
    if ("first" in this.props.links) {&#xD;
        navLinks.push(&amp;lt;button key="first" onClick={this.handleNavFirst}&amp;gt;&amp;amp;lt;&amp;amp;lt;&amp;lt;/button&amp;gt;);&#xD;
    }&#xD;
    if ("prev" in this.props.links) {&#xD;
        navLinks.push(&amp;lt;button key="prev" onClick={this.handleNavPrev}&amp;gt;&amp;amp;lt;&amp;lt;/button&amp;gt;);&#xD;
    }&#xD;
    if ("next" in this.props.links) {&#xD;
        navLinks.push(&amp;lt;button key="next" onClick={this.handleNavNext}&amp;gt;&amp;amp;gt;&amp;lt;/button&amp;gt;);&#xD;
    }&#xD;
    if ("last" in this.props.links) {&#xD;
        navLinks.push(&amp;lt;button key="last" onClick={this.handleNavLast}&amp;gt;&amp;amp;gt;&amp;amp;gt;&amp;lt;/button&amp;gt;);&#xD;
    }&#xD;
&#xD;
    return (&#xD;
        &amp;lt;div&amp;gt;&#xD;
            &amp;lt;input ref="pageSize" defaultValue={this.props.pageSize} onInput={this.handleInput}/&amp;gt;&#xD;
            &amp;lt;table&amp;gt;&#xD;
                &amp;lt;tr&amp;gt;&#xD;
                    &amp;lt;th&amp;gt;First Name&amp;lt;/th&amp;gt;&#xD;
                    &amp;lt;th&amp;gt;Last Name&amp;lt;/th&amp;gt;&#xD;
                    &amp;lt;th&amp;gt;Description&amp;lt;/th&amp;gt;&#xD;
                    &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;&#xD;
                &amp;lt;/tr&amp;gt;&#xD;
                {employees}&#xD;
            &amp;lt;/table&amp;gt;&#xD;
            &amp;lt;div&amp;gt;&#xD;
                {navLinks}&#xD;
            &amp;lt;/div&amp;gt;&#xD;
        &amp;lt;/div&amp;gt;&#xD;
    )&#xD;
}&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;As in the previous session, it still transforms &lt;code&gt;this.props.employees&lt;/code&gt; into an array of &lt;code&gt;&amp;lt;Element /&amp;gt;&lt;/code&gt; components. Then it builds up an array of &lt;code&gt;navLinks&lt;/code&gt;, an array of HTML buttons.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="admonitionblock note"&gt;&#xD;
&lt;table&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="icon"&gt;&#xD;
&lt;div class="title"&gt;Note&lt;/div&gt;&#xD;
&lt;/td&gt;&#xD;
&lt;td class="content"&gt;&#xD;
Because React is based on XML, you can&amp;#8217;t put "&amp;lt;" inside the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element. You must instead use the encoded version.&#xD;
&lt;/td&gt;&#xD;
&lt;/tr&gt;&#xD;
&lt;/table&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Then you can see &lt;code&gt;{navLinks}&lt;/code&gt; inserted towards the bottom of the returned HTML.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_deleting_existing_records"&gt;Deleting existing records&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Deleting entries is much easier. Get a hold of its HAL-based record and apply &lt;strong&gt;DELETE&lt;/strong&gt; to its &lt;strong&gt;self&lt;/strong&gt; link.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;var Employee = React.createClass({&#xD;
    handleDelete: function () {&#xD;
        this.props.onDelete(this.props.employee);&#xD;
    },&#xD;
    render: function () {&#xD;
        return (&#xD;
            &amp;lt;tr&amp;gt;&#xD;
                &amp;lt;td&amp;gt;{this.props.employee.firstName}&amp;lt;/td&amp;gt;&#xD;
                &amp;lt;td&amp;gt;{this.props.employee.lastName}&amp;lt;/td&amp;gt;&#xD;
                &amp;lt;td&amp;gt;{this.props.employee.description}&amp;lt;/td&amp;gt;&#xD;
                &amp;lt;td&amp;gt;&#xD;
                    &amp;lt;button onClick={this.handleDelete}&amp;gt;Delete&amp;lt;/button&amp;gt;&#xD;
                &amp;lt;/td&amp;gt;&#xD;
            &amp;lt;/tr&amp;gt;&#xD;
        )&#xD;
    }&#xD;
})&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;This updated version of the Employee component shows an extra entry at the end of the row, a delete button. It is registered to invoke &lt;code&gt;this.handleDelete&lt;/code&gt; when clicked upon. The &lt;code&gt;handleDelete()&lt;/code&gt; function can then invoke the callback passed down while supplying the contextually important &lt;code&gt;this.props.employee&lt;/code&gt; record.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="admonitionblock important"&gt;&#xD;
&lt;table&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="icon"&gt;&#xD;
&lt;div class="title"&gt;Important&lt;/div&gt;&#xD;
&lt;/td&gt;&#xD;
&lt;td class="content"&gt;&#xD;
This shows again that it is easiest to manage state in the top component, in one place. This might not &lt;em&gt;always&lt;/em&gt; be the case, but oftentimes, managing state in one place makes it easier to keep straight and simpler. By invoking the callback with component-specific details (&lt;code&gt;this.props.onDelete(this.props.employee)&lt;/code&gt;), it is very easy to orchestrate behavior between components.&#xD;
&lt;/td&gt;&#xD;
&lt;/tr&gt;&#xD;
&lt;/table&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Tracing the &lt;code&gt;onDelete()&lt;/code&gt; function back to the top at &lt;code&gt;App.onDelete&lt;/code&gt;, you can see how it operates:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;onDelete: function (employee) {&#xD;
    client({method: 'DELETE', path: employee._links.self.href}).done(response =&amp;gt; {&#xD;
        this.loadFromServer(this.state.pageSize);&#xD;
    });&#xD;
},&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;The behavior to apply after deleting a record with a page-based UI is a bit tricky. In this case, it reloads the whole data from the server, applying the same page size. Then it shows the first page.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;If you are deleting the last record on the last page, it will jump to the first page.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_adjusting_the_page_size"&gt;Adjusting the page size&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;One way to see how hypermedia really shines is to update the page size. Spring Data REST fluidly updates the navigational links based on the page size.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;There is an HTML element at the top of &lt;code&gt;ElementList.render&lt;/code&gt;: &lt;code&gt;&amp;lt;input ref="pageSize" defaultValue={this.props.pageSize} onInput={this.handleInput}/&amp;gt;&lt;/code&gt;.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="ulist"&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;&#xD;
&lt;code&gt;ref="pageSize"&lt;/code&gt; makes it easy to grab that element via this.refs.pageSize.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
&lt;code&gt;defaultValue&lt;/code&gt; initializes it with the state&amp;#8217;s &lt;strong&gt;pageSize&lt;/strong&gt;.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
&lt;code&gt;onInput&lt;/code&gt; registers a handler as shown below.&#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;handleInput: function (e) {&#xD;
    e.preventDefault();&#xD;
    var pageSize = React.findDOMNode(this.refs.pageSize).value;&#xD;
    if (/^[0-9]+$/.test(pageSize)) {&#xD;
        this.props.updatePageSize(pageSize);&#xD;
    } else {&#xD;
        React.findDOMNode(this.refs.pageSize).value =&#xD;
            pageSize.substring(0, pageSize.length - 1);&#xD;
    }&#xD;
},&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;It stops the event from bubbling up. Then it uses the &lt;strong&gt;ref&lt;/strong&gt; attribute of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; to find the DOM node and extract its value, all through React&amp;#8217;s &lt;code&gt;findDOMNode()&lt;/code&gt; helper function. It tests if the input is really a number by checking if it&amp;#8217;s a string of digits. If so, it invokes the callback, sending the new page size to the &lt;code&gt;App&lt;/code&gt; React component. If not, the character just entered is stripped off the input.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;What does &lt;code&gt;App&lt;/code&gt; do when it gets a &lt;code&gt;updatePageSize()&lt;/code&gt;? Check it out:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;updatePageSize: function (pageSize) {&#xD;
    if (pageSize !== this.state.pageSize) {&#xD;
        this.loadFromServer(pageSize);&#xD;
    }&#xD;
},&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Because a new page size causes changes to all the navigation links, it&amp;#8217;s best to refetch the data and start from the beginning.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_putting_it_all_together"&gt;Putting it all together&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;With all these nice additions, you now have a really vamped up UI.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="imageblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;img src="https://github.com/gregturn/react-and-spring-data-rest/raw/master/hypermedia/images/hypermedia-1.png" alt="hypermedia 1"&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;You can see the page size setting at the top, the delete buttons on each row, and the navigational buttons at the bottom. The navigational buttons illustrate a powerful feature of hypermedia controls.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Down below, you can see the &lt;code&gt;CreateDialog&lt;/code&gt; with the metadata plugged into the HTML input placeholders.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="imageblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;img src="https://github.com/gregturn/react-and-spring-data-rest/raw/master/hypermedia/images/hypermedia-2.png" alt="hypermedia 2"&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;This really shows the power of using hypermedia coupled with domain-driven metadata (JSON Schema). The web page doesn&amp;#8217;t have to know which field is which. Instead, the user can &lt;em&gt;see&lt;/em&gt; it and know how to use it. If you added another field to the &lt;code&gt;Employee&lt;/code&gt; domain object, this pop-up would automatically display it.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_review"&gt;Review&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;In this session:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="ulist"&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;&#xD;
You turned on Spring Data REST&amp;#8217;s paging feature.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
You threw out hardcoded URI paths and started using the root URI combined with relationship names or "rels".&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
You updated the UI to dynamically use page-based hypermedia controls.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
You added the ability to create &amp;amp; delete employees and update the UI as needed.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
You made it possible to change the page size and have the UI flexibly respond.&#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Issues?&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;You made the webpage dynamic. But open another browser tab and point it at the same app. Changes in one tab won&amp;#8217;t update anything in the other.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;That is something we can address in the next session. Until then, happy coding!&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Spring Integration 4.2 Release is Available</title>
    <link rel="alternate" href="https://spring.io/blog/2015/09/10/spring-integration-4-2-release-is-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Gary Russell</name>
    </author>
    <id>tag:spring.io,2015-09-10:2233</id>
    <updated>2015-09-10T12:47:47Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce that the 4.2.0.RELEASE of Spring Integration is now available.&lt;/p&gt;&lt;p&gt;See the &lt;a href="https://jira.spring.io/jira/secure/ReleaseNote.jspa?projectId=10121&amp;version=15213"&gt;release notes&lt;/a&gt; for a few changes that have been applied since the release candidate was announced.&lt;/p&gt;&lt;p&gt;See the &lt;a href="https://spring.io/blog/2015/08/17/spring-integration-4-2-release-candidate-is-available"&gt;release candidate announcement&lt;/a&gt; and the &lt;a href="http://docs.spring.io/spring-integration/docs/4.2.0.RELEASE/reference/html/whats-new.html"&gt;reference document what&amp;rsquo;s new&lt;/a&gt; for complete details of the release content.&lt;/p&gt;&lt;p&gt;See the &lt;a href="http://projects.spring.io/spring-integration/"&gt;project page&lt;/a&gt; for links to downloads, documentation etc.&lt;/p&gt;&lt;h2&gt;&lt;a href="#springone-2gx-2015-is-around-the-corner" class="anchor" name="springone-2gx-2015-is-around-the-corner"&gt;&lt;/a&gt;SpringOne 2GX 2015 is around the corner!&lt;/h2&gt;&lt;p&gt;Book your place at &lt;a href="http://www.springone2gx.com/"&gt;SpringOne2GX in Washington, DC next week&lt;/a&gt;. It’s simply the best opportunity to find out first hand all that’s going on and to provide direct feedback.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring AMQP 1.5.0 Release Available</title>
    <link rel="alternate" href="https://spring.io/blog/2015/09/10/spring-amqp-1-5-0-release-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Gary Russell</name>
    </author>
    <id>tag:spring.io,2015-09-10:2232</id>
    <updated>2015-09-10T12:40:03Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce that the 1.5.0.RELEASE of Spring AMQP is now available.&lt;/p&gt;&lt;p&gt;See the &lt;a href="https://jira.spring.io/jira/secure/ReleaseNote.jspa?projectId=10450&amp;version=15283"&gt;release notes&lt;/a&gt; for a few changes that have been applied since the release candidate was announced.&lt;/p&gt;&lt;p&gt;See the &lt;a href="https://spring.io/blog/2015/08/14/spring-amqp-1-5-0-release-candidate-available"&gt;release candidate announcement&lt;/a&gt; and the &lt;a href="http://docs.spring.io/spring-amqp/docs/latest-ga/reference/html/_introduction.html#whats-new"&gt;reference document what&amp;rsquo;s new&lt;/a&gt; for complete details of the release content.&lt;/p&gt;&lt;p&gt;See the &lt;a href="http://projects.spring.io/spring-amqp/"&gt;project page&lt;/a&gt; for links to downloads, documentation etc.&lt;/p&gt;&lt;h2&gt;&lt;a href="#springone-2gx-2015-is-around-the-corner" class="anchor" name="springone-2gx-2015-is-around-the-corner"&gt;&lt;/a&gt;SpringOne 2GX 2015 is around the corner!&lt;/h2&gt;&lt;p&gt;Book your place at &lt;a href="http://www.springone2gx.com/"&gt;SpringOne2GX in Washington, DC next week&lt;/a&gt;. It’s simply the best opportunity to find out first hand all that’s going on and to provide direct feedback.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Integration Java DSL 1.1 M2 is Available</title>
    <link rel="alternate" href="https://spring.io/blog/2015/09/10/spring-integration-java-dsl-1-1-m2-is-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Artem Bilan</name>
    </author>
    <id>tag:spring.io,2015-09-10:2234</id>
    <updated>2015-09-10T11:24:00Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce that the Milestone 2 of Spring Integration Java DSL is now available from the &lt;a href="https://repo.spring.io/milestone/"&gt;Milestone Repository&lt;/a&gt;:&lt;/p&gt;&lt;p&gt;For Gradle use this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;compile &amp;quot;org.springframework.integration:spring-integration-java-dsl:1.1.0.M2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For Maven this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&amp;lt;dependency&amp;gt;&#xD;
     &amp;lt;groupId&amp;gt;org.springframework.integration&amp;lt;/groupId&amp;gt;&#xD;
     &amp;lt;artifactId&amp;gt;spring-integration-java-dsl&amp;lt;/artifactId&amp;gt;&#xD;
     &amp;lt;version&amp;gt;1.1.0.M2&amp;lt;/version&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are not many new features since &lt;a href="https://spring.io/blog/2015/04/15/spring-integration-java-dsl-1-1-m1-is-available"&gt;Milestone 1&lt;/a&gt;, but here are the most important things to which to pay attention:&lt;/p&gt;&lt;h2&gt;&lt;a href="#spring-integration-4-2-foundation" class="anchor" name="spring-integration-4-2-foundation"&gt;&lt;/a&gt;Spring Integration 4.2 foundation&lt;/h2&gt;&lt;p&gt;The Spring Integration Java DSL 1.1 is now based on &lt;a href="https://spring.io/blog/2015/09/10/spring-integration-4-2-release-is-available"&gt;Spring Integration 4.2&lt;/a&gt; to become part of the upcoming &lt;a href="http://platform.spring.io/platform/"&gt;Spring IO 2.0&lt;/a&gt;. The 1.1 version of the Java DSL is no longer compatible with Spring Integration 4.1.x. &lt;/p&gt;&lt;h2&gt;&lt;a href="#spring-integration-kafka-1-2-x-upgrade" class="anchor" name="spring-integration-kafka-1-2-x-upgrade"&gt;&lt;/a&gt;Spring Integration Kafka 1.2.x upgrade&lt;/h2&gt;&lt;p&gt;We now provide the &lt;code&gt;Kafka&lt;/code&gt; Namespace Factory for the Spring Integration Kafka Adapters. The new Spring Integration Kafka 1.2 &lt;a href="https://spring.io/blog/2015/06/19/spring-integration-kafka-1-2-is-available-with-0-8-2-support-and-performance-enhancements"&gt;release&lt;/a&gt; together with the upgrade to Apache Kafka &lt;code&gt;0.8.2&lt;/code&gt; brings a number of breaking changes. Hence this Java DSL Milestone 2 of 1.1 is no longer compatible with the previous version of Spring Integration Kafka and Apache Kafka respectively.&lt;/p&gt;&lt;h2&gt;&lt;a href="#http-namespace-factory" class="anchor" name="http-namespace-factory"&gt;&lt;/a&gt;HTTP Namespace Factory&lt;/h2&gt;&lt;p&gt;The Spring Integration HTTP Adapters are now covered with their specific &lt;code&gt;Http&lt;/code&gt; Namespace Factory. Please, meet our classical HTTP Proxy sample, but on Java DSL already:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Bean&#xD;
public IntegrationFlow httpProxyFlow() {&#xD;
    return IntegrationFlows&#xD;
        .from((MessagingGateways g) -&amp;gt;&#xD;
               g.httpGateway(&amp;quot;/proxy&amp;quot;)&#xD;
                     .requestMapping(r -&amp;gt; r.params(&amp;quot;name&amp;quot;))&#xD;
                     .payloadFunction(httpEntity -&amp;gt;&#xD;
                           ((ServletRequestAttributes) RequestContextHolder&#xD;
                                                     .currentRequestAttributes())&#xD;
						.getRequest()&#xD;
						.getQueryString()))&#xD;
        .handleWithAdapter(a -&amp;gt;&#xD;
              a.httpGateway(m -&amp;gt;&#xD;
                   String.format(&amp;quot;http://target/service?%s&amp;quot;, m.getPayload()))&#xD;
                              .expectedResponseType(String.class))&#xD;
        .get();&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#reactive-streams-support" class="anchor" name="reactive-streams-support"&gt;&lt;/a&gt;Reactive Streams Support&lt;/h2&gt;&lt;p&gt;We are pleased to announce that Spring Integration is beginning to provide integration with &lt;a href="http://www.reactive-streams.org/"&gt;Reactive Streams&lt;/a&gt; and support for &lt;code&gt;Publisher&lt;/code&gt; is presented in the Java DSL directly:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Bean&#xD;
public Publisher&amp;lt;Message&amp;lt;String&amp;gt;&amp;gt; reactiveFlow() {&#xD;
	return IntegrationFlows&#xD;
		.from(() -&amp;gt; new GenericMessage&amp;lt;&amp;gt;(&amp;quot;a,b,c,d,e,f&amp;quot;))&#xD;
		.split(String.class, p -&amp;gt; p.split(&amp;quot;,&amp;quot;))&#xD;
		.toReactivePublisher();&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you see it is simple to go from the Spring Integration world to the Reactive Streams world. The &lt;code&gt;org.reactivestreams.Publisher&lt;/code&gt; bean can be used afterwards as an event source for the Reactive program, e.g. using the &lt;a href="http://projectreactor.io/"&gt;Project Reactor&lt;/a&gt; implementation:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Autowired&#xD;
@Qualifier(&amp;quot;reactiveFlow&amp;quot;)&#xD;
private Publisher&amp;lt;Message&amp;lt;String&amp;gt;&amp;gt; publisher;&#xD;
....&#xD;
List&amp;lt;String&amp;gt; results = new ArrayList&amp;lt;&amp;gt;();&#xD;
CountDownLatch latch = new CountDownLatch(6);&#xD;
Streams.wrap(this.publisher)&#xD;
	.map(m -&amp;gt; m.getPayload().toUpperCase())&#xD;
	.consume(p -&amp;gt; {&#xD;
			results.add(p);&#xD;
			latch.countDown();&#xD;
		});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The other direction - from Reactive Stream to the Spring Integration - is simple enough, too (from Reactor perspective):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;.consume(v -&amp;gt; messagingTemplate().convertAndSend(reactorStreamResult(), v));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We will consider some &lt;code&gt;org.reactivestreams.Subscriber&lt;/code&gt; option for the &lt;code&gt;MessageChannel&lt;/code&gt; implementation in the future release.&lt;/p&gt;&lt;h2&gt;&lt;a href="#other-changes" class="anchor" name="other-changes"&gt;&lt;/a&gt;Other changes&lt;/h2&gt;&lt;p&gt;There have been done other important refactoring and deprecations to make the DSL more fluent, convenient and flexible, such as: &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;Files.splitter()&lt;/code&gt; factory method for the &lt;code&gt;FileSplitter&lt;/code&gt; component;&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;(S)Ftp.outboundGateway()&lt;/code&gt; for new &lt;code&gt;MessageSessionCallback&lt;/code&gt; (a Spring Integration 4.2 feature);&lt;/li&gt;
  &lt;li&gt;Refactored and improved &lt;code&gt;.aggregate()&lt;/code&gt; and &lt;code&gt;.resequence()&lt;/code&gt; EIP-methods etc.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#springone-2gx-2015-is-around-the-corner" class="anchor" name="springone-2gx-2015-is-around-the-corner"&gt;&lt;/a&gt;SpringOne 2GX 2015 is around the corner!&lt;/h2&gt;&lt;p&gt;Book your place at &lt;a href="http://www.springone2gx.com/"&gt;SpringOne2GX in Washington, DC next week&lt;/a&gt;. It’s simply the best opportunity to find out first hand all that’s going on and to provide direct feedback.&lt;/p&gt;&lt;p&gt;Come to my &lt;a href="https://2015.event.springone2gx.com/schedule/sessions/spring_integration_java_dsl.html"&gt;talk&lt;/a&gt; to get more information from the first hands of Spring Integration Java DSL and help me to make this Framework better!&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-integration-java-dsl"&gt;Project Page&lt;/a&gt; | &lt;a href="https://jira.spring.io/browse/INTEXT"&gt;JIRA&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-integration-java-dsl/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.md"&gt;Contributions&lt;/a&gt; | &lt;a href="http://stackoverflow.com"&gt;StackOverflow&lt;/a&gt; (&lt;code&gt;spring-integration&lt;/code&gt; tag)&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring REST Docs 1.0.0.RC1</title>
    <link rel="alternate" href="https://spring.io/blog/2015/09/08/spring-rest-docs-1-0-0-rc1" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2015-09-08:2231</id>
    <updated>2015-09-08T15:51:00Z</updated>
    <content type="html">&lt;p&gt;I&amp;rsquo;m delighted to announce that &lt;a href="https://github.com/spring-projects/spring-restdocs"&gt;Spring REST Docs&lt;/a&gt; 1.0.0.RC1 has been released and is available from our &lt;a href="https://repo.spring.io/milestone"&gt;milestone repository&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you&amp;rsquo;d like to see some examples of what can be produced with Spring REST Docs, please take a look at the &lt;a href="http://docs.spring.io/spring-restdocs/docs/1.0.0.BUILD-SNAPSHOT/samples/restful-notes/"&gt;sample documentation&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#what-rsquo-s-new" class="anchor" name="what-rsquo-s-new"&gt;&lt;/a&gt;What&amp;rsquo;s new&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Support for &lt;a href="http://docs.spring.io/spring-restdocs/docs/1.0.0.RC1/reference/html5/#documenting-your-api-path-parameters"&gt;documenting path parameters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Support for documenting multipart requests&lt;/li&gt;
  &lt;li&gt;Support for &lt;a href="http://docs.spring.io/spring-restdocs/docs/1.0.0.RC1/reference/html5/#documenting-your-api-constraints"&gt;documenting constraints declared using the Bean Validation API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Improved extensibility&lt;/li&gt;
  &lt;li&gt;Improved configurability, including &lt;a href="http://docs.spring.io/spring-restdocs/docs/1.0.0.RC1/reference/html5/#documenting-your-api-customizing"&gt;template-based snippet rendering that allows you to take complete control over the generated snippets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#getting-started" class="anchor" name="getting-started"&gt;&lt;/a&gt;Getting started&lt;/h2&gt;&lt;p&gt;To get started with Spring REST Docs, please refer to the &lt;a href="http://docs.spring.io/spring-restdocs/docs/1.0.0.RC1/reference/html5/#getting-started"&gt;getting started section&lt;/a&gt; of the &lt;a href="http://docs.spring.io/spring-restdocs/docs/1.0.0.RC1/reference/html5/"&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#upgrading" class="anchor" name="upgrading"&gt;&lt;/a&gt;Upgrading&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;re upgrading to Spring REST Docs from 1.0.0.M1, you&amp;rsquo;ll need to change your dependency from &lt;code&gt;spring-restdocs&lt;/code&gt; to &lt;code&gt;spring-restdocs-mockmvc&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#schedule" class="anchor" name="schedule"&gt;&lt;/a&gt;Schedule&lt;/h2&gt;&lt;p&gt;Spring REST Docs 1.0.0.RELEASE is planned for early October. Please grab the RC and &lt;a href="https://github.com/spring-projects/spring-restdocs/issues"&gt;let us know&lt;/a&gt; about any problems you encounter.&lt;/p&gt;&lt;h2&gt;&lt;a href="#springone-2015" class="anchor" name="springone-2015"&gt;&lt;/a&gt;SpringOne 2015&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ll be talking about &lt;a href="https://2015.event.springone2gx.com/schedule/sessions/documenting_restful_apis.html"&gt;documenting RESTful APIs&lt;/a&gt;, including some live coding with Spring REST Docs, at this year&amp;rsquo;s &lt;a href="http://springone2gx.com"&gt;SpringOne&lt;/a&gt; in Washington, DC. I&amp;rsquo;d love to see you there.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - September 8, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/09/08/this-week-in-spring-september-8-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-09-08:2229</id>
    <updated>2015-09-08T06:00:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installation of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I left Tokyo, Japan, and have been in Shanghai, China, speaking to a few large-scale startups - including &lt;a href="http://Ele.me"&gt;Ele.me&lt;/a&gt;, the largest food delivery service and application in a &lt;em&gt;very&lt;/em&gt; crowded Chinese market with more than 2 million orders every day - about building cloud-native applications using Spring Boot, Spring Cloud and Cloud Foundry! Tomorrow, it&amp;rsquo;s off to Oslo, Norway, &lt;a href="http://2015.javazone.no/"&gt;for the amazing JavaZone&lt;/a&gt; conference. I love this conference and have, in the last two years, been unable to attend because it was concurrent with SpringOne2GX! Happily, this year it is not, and I&amp;rsquo;ll be passing through on my way to Washington DC and SpringOne2GX 2015, this Monday!&lt;/p&gt;&lt;p&gt;The Spring team is hard at work this week &lt;a href="http://springone2gx.com/"&gt;preparing for SpringOne2GX 2015&lt;/a&gt;, starting next Monday, and so this week&amp;rsquo;s seen a &lt;em&gt;ton&lt;/em&gt; of exciting new releases! We&amp;rsquo;re all excited for the next week and we hope to see you there!&lt;/p&gt;&lt;p&gt;Finally, it is my pleasure to share that my dear friend Kenny Bastani, who I asked to be the co-author of the upcoming book, O&amp;rsquo;Reilly&amp;rsquo;s upcoming &lt;a href="http://shop.oreilly.com/product/0636920038252.do"&gt;&lt;em&gt;Cloud Native Java&lt;/em&gt;&lt;/a&gt;, joins my team this week as the first new Spring Developer Advocate. I hope &lt;a href="http://twitter.com/kennybastani"&gt;you&amp;rsquo;ll join me in welcoming him to the community and family&lt;/a&gt;!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data ninja Christoph Strobl put together a nice post on &lt;a href="http://spring.io/blog/2015/09/04/what-s-new-in-spring-data-release-gosling"&gt;what&amp;rsquo;s coming in Spring Data Gosling &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring ninja Stéphane Nicoll just &lt;a href="http://spring.io/blog/2015/09/01/spring-framework-4-2-1-available-now"&gt;announced Spring framework 4.2.1 is now available&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Spring Boot co-founder and all around nice guy &lt;a href="http://spring.io/blog/2015/09/04/spring-boot-1-3-0-m5-available-now"&gt;Phil Webb just announced that Spring Boot 1.3.0 M5 is now available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Security lead &lt;a href="http://spring.io/blog/2015/09/02/spring-ldap-2-0-4-released"&gt;Rob Winch just announced some updates to Spring Security LDAP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Web ninja &lt;a href="http://spring.io/blog/2015/09/01/spring-web-flow-2-4-2-released"&gt;Rossen Stoyanchev announced Spring Web Flow 2.4.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Statemachine lead Janne Valkealahti &lt;a href="http://spring.io/blog/2015/09/01/spring-statemachine-1-0-0-rc1-released"&gt;just announced 1.0.0.RC1 - get the bits and kick the tires&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Our pal Ken Kreuger has put &lt;a href="https://www.udemy.com/microservices-with-spring-cloud/"&gt;together a Spring Cloud tutorial on Udemy&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Dave Burke&amp;rsquo;s put together a nice post on one of &lt;a href="http://nixmash.com/java/using-spring-boot-commandlinerunner/"&gt;my favorite Spring Boot features, &lt;code&gt;CommandLineRunner&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This Czech-language post on running Spring Boot &lt;a href="http://www.java-skoleni.cz/novinky/jak-spustit-spring-boot-aplikaci-na-openshift.html"&gt;applications on Openshift looks pretty interesting!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Speaking of which, Red Hat &lt;em&gt;also&lt;/em&gt; did a blog on &lt;a href="https://blog.openshift.com/using-openshift-enterprise-grade-spring-boot-deployments/"&gt;running Spring Boot applications on Openshift this week&lt;/a&gt;! It is nice to see the likes of Red Hat talking about our cloud native technology stack.&lt;/li&gt;
  &lt;li&gt;Tomasz Nurkiewicz has put together a really cool &lt;a href="http://www.nurkiewicz.com/2015/09/displaying-progress-of-spring.html"&gt;blog on monitoring the startup progress of a Spring Boot application&lt;/a&gt;. Of course Spring Boot applications typically take less than three seconds from &lt;code&gt;java -jar ..&lt;/code&gt; to handling requests, as he points out, but it can be helpful to get visibility into this progress!&lt;/li&gt;
  &lt;li&gt;This video on &lt;a href="https://www.youtube.com/watch?v=pgQ9Bs-6l2k"&gt;Spring Boot web looked pretty interesting&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>What's New In Spring Data Release Gosling?</title>
    <link rel="alternate" href="https://spring.io/blog/2015/09/04/what-s-new-in-spring-data-release-gosling" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Christoph Strobl</name>
    </author>
    <id>tag:spring.io,2015-09-02:2227</id>
    <updated>2015-09-04T08:01:00Z</updated>
    <content type="html">&lt;p&gt;Over 300 issues fixed across 12 projects makes it pretty hard to keep track on what has happened since the last release. So here&amp;rsquo;s a more detailed excerpt of some of the new features we&amp;rsquo;ve been cooking during the last iteration.&lt;/p&gt;&lt;h2&gt;&lt;a href="#ad-hoc-jpa-fetch-graphs" class="anchor" name="ad-hoc-jpa-fetch-graphs"&gt;&lt;/a&gt;Ad-hoc JPA fetch graphs.&lt;/h2&gt;&lt;p&gt;Since the Dijkstra release train we have been able to refer to the named entity graph declared on the entity through the &lt;code&gt;@EntityGraph&lt;/code&gt; annotation in JPA-backed repositories. In the example below this forces firstname and lastname to be loaded eagerly, while all others remain lazily loaded.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Entity&#xD;
@NamedEntityGraphs(&#xD;
  @NamedEntityGraph(name = &amp;quot;with-tags&amp;quot;,&#xD;
    attributeNodes = { @NamedAttributeNode(&amp;quot;tags&amp;quot;) }))&#xD;
class Product {&#xD;
&#xD;
  @ManyToMany&#xD;
  Set&amp;lt;Tag&amp;gt; tags;&#xD;
&#xD;
  // other properties omitted&#xD;
}&#xD;
&#xD;
interface ProductRepository extends Repository&amp;lt;Customer, Long&amp;gt; {&#xD;
&#xD;
  @EntityGraph(&amp;quot;with-tags&amp;quot;)&#xD;
  Product findOneById(Long id);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The Gosling release now takes our JPA 2.1 story one step forward, extending it to ad-hoc fetch graph definitions. By explicitly specifying properties via &lt;code&gt;@EntityGraph(attributePaths = …)&lt;/code&gt; on the query method you don&amp;rsquo;t need to have the &lt;code&gt;NamedEntityGraph&lt;/code&gt; annotation on your entity.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Entity&#xD;
class Product {&#xD;
&#xD;
  @ManyToMany&#xD;
  Set&amp;lt;Tag&amp;gt; tags;&#xD;
&#xD;
  // other properties omitted&#xD;
}&#xD;
&#xD;
interface ProductRepository extends Repository&amp;lt;Customer, Long&amp;gt; {&#xD;
&#xD;
  @EntityGraph(attributePaths = {&amp;quot;tags&amp;quot;})&#xD;
  Product findOneById(Long id);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#querydsl-web-support" class="anchor" name="querydsl-web-support"&gt;&lt;/a&gt;Querydsl web support&lt;/h2&gt;&lt;p&gt;The Spring Data web support already lets you declare parameters of type &lt;code&gt;Pageable&lt;/code&gt; in your controller handler methods. The newly introduced Querydsl integration extends that to allow you to receive a ready to use &lt;code&gt;Predicate&lt;/code&gt; derived directly from the HTTP request&amp;rsquo;s query string. The feature is automatically enabled when &lt;code&gt;@EnableSpringDataWebSupport&lt;/code&gt; is configured and Querydsl is found on the classpath.&lt;/p&gt;&lt;p&gt;If &lt;code&gt;Predicate&lt;/code&gt; is used without further configuration we&amp;rsquo;ll try to resolve the root type for &lt;code&gt;Predicate&lt;/code&gt; resolution from the method&amp;rsquo;s return type, although in most cases it might be better to explicitly declare the desired type reference via &lt;code&gt;@QuerydslPredicate(root = …)&lt;/code&gt;. Having that in place, query string attributes are bound to matching properties of the type which creates e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;QUser.user.firstname.eq(&amp;quot;Dave&amp;quot;).and(QUser.user.lastname.eq(&amp;quot;Matthews&amp;quot;)) 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;from &lt;code&gt;?firstname=Dave&amp;amp;lastname=Matthews&lt;/code&gt; using the default property type dependent binding.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
public class Application {&#xD;
&#xD;
  public static void main(String[] args) {&#xD;
    SpringApplication.run(Application.class, args);&#xD;
  }&#xD;
&#xD;
  @Controller&#xD;
  @RequiredArgsConstructor(onConstructor = @__(@Autowired))&#xD;
  static class UserController {&#xD;
&#xD;
    private final UserRepository repository;&#xD;
&#xD;
    @RequestMapping(value = &amp;quot;/&amp;quot;, method = RequestMethod.GET)&#xD;
    String index(Model model,&#xD;
                 @QuerydslPredicate(root = User.class) Predicate predicate,&#xD;
                 Pageable pageable) {&#xD;
&#xD;
      model.addAttribute(&amp;quot;users&amp;quot;, repository.findAll(predicate, pageable));&#xD;
      return &amp;quot;index&amp;quot;;&#xD;
    }&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now it does not always make sense to use the default (equals) binding, but rather a dedicated binding per property or a type specific one. To achieve this just override the defaults by providing a &lt;code&gt;QuerydslBinderCustomizer&lt;/code&gt; that can either be registered via &lt;code&gt;@QuerydslPredicate(bindings = …)&lt;/code&gt; or is simply implemented by to the repository.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;interface UserRepository extends CrudRepository&amp;lt;User, String&amp;gt;,&#xD;
    QueryDslPredicateExecutor&amp;lt;User&amp;gt;,&#xD;
    QuerydslBinderCustomizer&amp;lt;QUser&amp;gt; {&#xD;
&#xD;
  // Query methods go here&#xD;
&#xD;
  @Override&#xD;
  default public void customize(QuerydslBindings bindings, QUser user) {&#xD;
&#xD;
    bindings.bind(user.nationality).first(&#xD;
      (path, value) -&amp;gt; path.equalsIgnoreCase(value)); // 1&#xD;
    bindings.bind(String.class).first(&#xD;
      (StringPath path, String value) -&amp;gt; path.containsIgnoreCase(value)); // 2&#xD;
    bindings.excluding(user.password);&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see we leverage Java 8 lambdas along side Querydsl&amp;rsquo;s type-safe property references to define the binding for a dedicated property (1) or for all properties of a given type (2). Using &lt;code&gt;QuerydslBindings.excluding&lt;/code&gt; allows you remove paths from being queryable.&lt;/p&gt;&lt;p&gt;Find a complete working example in the &lt;a href="https://github.com/spring-projects/spring-data-examples/tree/master/web/querydsl"&gt;Spring Data examples repository&lt;/a&gt; and check out the &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.9.0.RELEASE/reference/html/#core.web.type-safe"&gt;reference documentation&lt;/a&gt; for details.&lt;/p&gt;&lt;h2&gt;&lt;a href="#spring-data-rest" class="anchor" name="spring-data-rest"&gt;&lt;/a&gt;Spring Data REST&lt;/h2&gt;&lt;h3&gt;&lt;a href="#querydsl-support" class="anchor" name="querydsl-support"&gt;&lt;/a&gt;Querydsl support&lt;/h3&gt;&lt;p&gt;The Querydsl support introduced in Spring Data Commons (see &lt;a href="#querydsl-web-support"&gt;above&lt;/a&gt;) has been integrated into Spring Data REST. That means that you can filter your collection resources by appending simple property query parameters to the request URI.&lt;/p&gt;&lt;p&gt;In the Spring Data REST example exposing Starbucks store locations, note how StoreRepository now implements both &lt;code&gt;QueryDslPredicateExecutor&lt;/code&gt; as well as &lt;code&gt;QuerydslBinderCustomizer&amp;lt;QStore&amp;gt;&lt;/code&gt; just as described above.&lt;/p&gt;&lt;p&gt;The collection resource for stores exposed by Spring Data REST will let you then issue requests like these:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;$ http :8080/api/stores?address.city=York&#xD;
&#xD;
{&#xD;
    &amp;quot;_embedded&amp;quot;: {&#xD;
        &amp;quot;stores&amp;quot;: [&#xD;
            {&#xD;
                &amp;quot;_links&amp;quot;: {&#xD;
                    …&#xD;
                }, &#xD;
                &amp;quot;address&amp;quot;: {&#xD;
                    &amp;quot;city&amp;quot;: &amp;quot;New York&amp;quot;, &#xD;
                    &amp;quot;location&amp;quot;: { &amp;quot;x&amp;quot;: -73.938421, &amp;quot;y&amp;quot;: 40.851 }, &#xD;
                    &amp;quot;street&amp;quot;: &amp;quot;803 W 181st St&amp;quot;, &#xD;
                    &amp;quot;zip&amp;quot;: &amp;quot;10033-4516&amp;quot;&#xD;
                }, &#xD;
                &amp;quot;name&amp;quot;: &amp;quot;Washington Hgts/181st St&amp;quot;&#xD;
            }, &#xD;
            {&#xD;
                &amp;quot;_links&amp;quot;: {&#xD;
                    …&#xD;
                }, &#xD;
                &amp;quot;address&amp;quot;: {&#xD;
                    &amp;quot;city&amp;quot;: &amp;quot;New York&amp;quot;, &#xD;
                    &amp;quot;location&amp;quot;: { &amp;quot;x&amp;quot;: -73.939822, &amp;quot;y&amp;quot;: 40.84135 }, &#xD;
                    &amp;quot;street&amp;quot;: &amp;quot;4001 Broadway&amp;quot;, &#xD;
                    &amp;quot;zip&amp;quot;: &amp;quot;10032-1508&amp;quot;&#xD;
                }, &#xD;
                &amp;quot;name&amp;quot;: &amp;quot;168th &amp;amp; Broadway&amp;quot;&#xD;
            }, &#xD;
            …&#xD;
        ]&#xD;
    }, &#xD;
    &amp;quot;_links&amp;quot;: {&#xD;
        …&#xD;
    }, &#xD;
    &amp;quot;page&amp;quot;: {&#xD;
        &amp;quot;number&amp;quot;: 0, &#xD;
        &amp;quot;size&amp;quot;: 20, &#xD;
        &amp;quot;totalElements&amp;quot;: 209, &#xD;
        &amp;quot;totalPages&amp;quot;: 11&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note how only returns stores whose city ends with &amp;ldquo;York&amp;rdquo;, just as defined in the implementation of &lt;code&gt;QuerydslBinderCustomizer&lt;/code&gt; in &lt;code&gt;StoresRepository&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;re currently looking into options to advertise this querying mechanism more obviously, e.g. using template variables and even provide advanced mapping facilities to customize the request parameter names to be used.&lt;/p&gt;&lt;h3&gt;&lt;a href="#custom-hal-browser" class="anchor" name="custom-hal-browser"&gt;&lt;/a&gt;Custom HAL Browser&lt;/h3&gt;&lt;p&gt;The Gosling release of Spring Data REST ships with an additional module that wraps Mike Kelly&amp;rsquo;s &lt;a href="https://github.com/mikekelly/hal-browser"&gt;HAL browser&lt;/a&gt; and tweaks it with a few customizations to leverage the API metadata we expose. To use the browser with your application simply add the &lt;code&gt;spring-data-rest-hal-browser&lt;/code&gt; module to your project and your API root will serve the browser for requests accepting &lt;code&gt;text/html&lt;/code&gt;. The standard HAL responses are of course still served by default or if you use a JSON based &lt;code&gt;Accept&lt;/code&gt; header.&lt;/p&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/spring-projects/spring-data-docs/master/whats-new-in-spring-data-gosling/hal-browser.png?token=AAH2Qd7efEBIcN92b1sItqsWewiO8-SOks5V8n76wA%3D%3D"&gt;&lt;br/&gt;&lt;img src="https://raw.githubusercontent.com/spring-projects/spring-data-docs/master/whats-new-in-spring-data-gosling/hal-browser.png?token=AAH2Qd7efEBIcN92b1sItqsWewiO8-SOks5V8n76wA%3D%3D" alt="HAL browser" title="HAL browser" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align: center; font-size: 0.9em"&gt;Fig 1. - HAL Browser (click to enlarge)&lt;/p&gt;&lt;p&gt;While the Spring Data REST module makes it easy to add the browser to your app, it also tweaks the browser slightly. When you click the button to trigger a non-&lt;code&gt;GET&lt;/code&gt; request, the browser would normally open a modal dialogue that expects some raw JSON input. While that&amp;rsquo;s of course great if you know what you&amp;rsquo;re doing, it&amp;rsquo;s a bit error prone and not really convenient, as you have to know about the data structure the server expects.&lt;/p&gt;&lt;p&gt;Spring Data REST exposes JSON schema documents for the types exposed by the system leveraging the &lt;code&gt;profile&lt;/code&gt; link relation which makes the schema generically discoverable without tying the discovery logic to Spring Data REST itself. The browser instance we ship will lookup that schema metadata and – if it can find some – hand this to JSON Editor to replace the default dialogue with a form completely derived from the JSON Schema.&lt;/p&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/spring-projects/spring-data-docs/master/whats-new-in-spring-data-gosling/json-editor-post-form.png?token=AAH2QeqM7VMT-M7dDkod9Tmp1EtKrAgVks5V8n_lwA%3D%3D"&gt;&lt;br/&gt;&lt;img src="https://raw.githubusercontent.com/spring-projects/spring-data-docs/master/whats-new-in-spring-data-gosling/json-editor-post-form.png?token=AAH2QeqM7VMT-M7dDkod9Tmp1EtKrAgVks5V8n_lwA%3D%3D" alt="JSON Editor based POST form" title="JSON Editor based POST form" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align: center; font-size: 0.9em"&gt;Fig 2. - JSON Editor based POST for (click to enlarge)&lt;/p&gt;&lt;p&gt;See how the form allows adding line items as the schema exposes it to be an array. The price and order date fields are marked as read-only, the location field allows choosing values from an enumeration with internationalized values.&lt;/p&gt;&lt;p&gt;The sample project can be found &lt;a href="https://github.com/olivergierke/spring-restbucks"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a href="#internationalizing-links-and-enums" class="anchor" name="internationalizing-links-and-enums"&gt;&lt;/a&gt;Internationalizing links and enums&lt;/h3&gt;&lt;p&gt;As you could see in the screenshots above the &lt;code&gt;restbucks:orders&lt;/code&gt; link was accompanied by a human readable description. The descriptions are pulled from an optional resource bundle &lt;code&gt;rest-messages&lt;/code&gt; using &lt;code&gt;_links.$rel.title&lt;/code&gt; keys to define a readable value. The sample uses a &lt;code&gt;rest-messages.properties&lt;/code&gt; as a fallback resource bundle but also contains a &lt;code&gt;rest-messages_de.properties&lt;/code&gt; to return German labels for clients that send an &lt;code&gt;Accept-Language&lt;/code&gt; header set to &lt;code&gt;de&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The same resource bundle can be used to internationalize enum values so that they can be used on the client in a human readable manner. To not break existing applications, this has to be explicitly activated via &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.4.0.RELEASE/api/org/springframework/data/rest/core/config/RepositoryRestConfiguration.html#setEnableEnumTranslation-boolean-"&gt;&lt;code&gt;RepositoryRestConfiguration.setEnableEnumTranslation(…)&lt;/code&gt;&lt;/a&gt;. Details about the translation can be configured on &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.4.0.RELEASE/api/org/springframework/data/rest/core/config/EnumTranslationConfiguration.html"&gt;&lt;code&gt;EnumTranslationConfiguration&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#spring-data-gemfire-amp-apache-geode" class="anchor" name="spring-data-gemfire-amp-apache-geode"&gt;&lt;/a&gt;Spring Data GemFire &amp;amp; Apache Geode&lt;/h2&gt;&lt;p&gt;Support for Pivotal GemFire 8.1 and Apache Geode are the most notable additions to Spring Data GemFire 1.7. Pivotal GemFire was submitted to the &lt;a href="https://wiki.apache.org/incubator/GeodeProposal"&gt;Apache Incubator&lt;/a&gt; earlier this year and the Spring Data team responded quickly to include &lt;a href="https://spring.io/blog/2015/06/12/spring-data-gemfire-supports-apache-geode"&gt;support&lt;/a&gt; in Spring Data GemFire.&lt;/p&gt;&lt;p&gt;In addition, several other features were added to simplify the development of GemFire and Apache Geode applications using Spring. For instance, developers can now define application domain object specific expiration policies using annotations:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@TimeToLiveExpiration(&#xD;
  timeout = &amp;quot;@expirationSettings[&amp;#39;spel.defined.timeout&amp;#39;]&amp;quot; action=&amp;quot;DESTROY&amp;quot;)&#xD;
@IdleTimeoutExpiration(&#xD;
  timeout = &amp;quot;1800&amp;quot; action=&amp;quot;${property.placeholder.defined.action}&amp;quot;)&#xD;
class ApplicationDomainObject { … }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The expiration-based annotations support both &lt;a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#expressions"&gt;SpEL&lt;/a&gt; and Spring &lt;a href="http://docs.spring.io/spring/docs/1.7.0.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-placeholderconfigurer"&gt;Property Placeholder&lt;/a&gt; values. To enable annotation-based expiration policies, you only need configure Spring Data GemFire&amp;rsquo;s &lt;a href="http://gemfire.docs.pivotal.io/latest/javadocs/japi/com/gemstone/gemfire/cache/CustomExpiry.html"&gt;CustomExpiry&lt;/a&gt; implementation, &lt;a href="http://docs.spring.io/spring-data-gemfire/docs/1.7.0.RELEASE/api/org/springframework/data/gemfire/support/AnnotationBasedExpiration.html"&gt;AnnotationBasedExpiration&lt;/a&gt;, on your GemFire regions for either, or both, TTL and TTI:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;gfe:partitioned-region id=&amp;quot;Example&amp;quot; persistent=&amp;quot;false&amp;quot; …&amp;gt;&#xD;
  &amp;lt;gfe:custom-entry-ttl&amp;gt;&#xD;
    &amp;lt;bean class=&amp;quot;….gemfire.support.AnnotationBasedExpiration&amp;quot; factory-method=&amp;quot;forTimeToLive&amp;quot;/&amp;gt;&#xD;
  &amp;lt;/gfe:custom-entry-ttl&amp;gt;&#xD;
  &amp;lt;gfe:custom-entry-tti ref=&amp;quot;ttiExpiration&amp;quot;/&amp;gt;&#xD;
&amp;lt;/gfe:partitioned-region&amp;gt;&#xD;
&#xD;
&amp;lt;bean id=&amp;quot;ttiExpiration&amp;quot; class=&amp;quot;….gemfire.support.AnnotationBasedExpiration&amp;quot; factory-method=&amp;quot;forIdleTimeout&amp;quot;&amp;gt;&#xD;
  &amp;lt;constructor-arg ref=&amp;quot;defaultExpirationAttributes&amp;quot;/&amp;gt;&#xD;
&amp;lt;/bean&amp;gt;&#xD;
&#xD;
&amp;lt;bean id=&amp;quot;defaultExpirationAttributes&amp;quot; class=&amp;quot;….ExpirationAttributes&amp;quot;&amp;gt;&#xD;
  &amp;lt;constructor-arg value=&amp;quot;600&amp;quot;/&amp;gt;&#xD;
  &amp;lt;constructor-arg value=&amp;quot;#{T(….ExpirationAction).DESTROY}&amp;quot;/&amp;gt;&#xD;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;See the reference guide to &lt;a href="http://docs.spring.io/spring-data-gemfire/docs/1.7.0.RELEASE/reference/html/#bootstrap:region:expiration"&gt;learn more&lt;/a&gt;. Next, support was added for repository query method OQL extensions via annotations:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;interface CustomerRepository implements CrudRepository&amp;lt;Cutomer, Long&amp;gt; {&#xD;
&#xD;
  @Trace&#xD;
  @Limit(25)&#xD;
  @Import(&amp;quot;org.exmple.Customer&amp;quot;)&#xD;
  @Hint(&amp;quot;CustomerLastNameIdx&amp;quot;)&#xD;
  List&amp;lt;Customer&amp;gt; findByLastNameOrderByLastNameAsc(String lastName);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;@Trace&lt;/code&gt; enables individual OQL statement debugging. &lt;code&gt;@Limit&lt;/code&gt; restrains the number of results in the query result set and &lt;code&gt;@Import&lt;/code&gt; enables applications to distinguish between similarly named object types. For example, your application might define both &lt;code&gt;org.example.app.core.Customer&lt;/code&gt; and &lt;code&gt;org.example.app.vendor.xyz.Customer&lt;/code&gt; types. See GemFire&amp;rsquo;s &lt;a href="http://gemfire81.docs.pivotal.io/latest/userguide/index.html#developing/query_select/the_import_statement.html#concept_2E9F15B2FE9041238B54736103396BF7"&gt;doc&lt;/a&gt; for more details. &lt;code&gt;@Hint&lt;/code&gt; enables the use of OQL hints to identify indexes applicable to the query. Learn more about OQL extensions &lt;a href="http://docs.spring.io/spring-data-gemfire/docs/1.7.0.RELEASE/reference/html/#gemfire-repositories.oql-extension"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Finally, Spring Data GemFire offers support for GemFire &lt;a href="http://gemfire81.docs.pivotal.io/latest/userguide/index.html#managing/cache_snapshots/chapter_overview.html"&gt;Cache and Region Snapshots&lt;/a&gt; using the Spring Data GemFire XML Data Namespace:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;gfe:partitioned-region id=&amp;quot;Example&amp;quot; persistent=&amp;quot;false&amp;quot; … /&amp;gt;&#xD;
&#xD;
&amp;lt;gfe-data:snapshot-service id=&amp;quot;exampleRegionSnapshotService&amp;quot; region-ref=&amp;quot;Example&amp;quot;&amp;gt;&#xD;
  &amp;lt;gfe-data:snapshot-import location=&amp;quot;/path/to/import/example.snapshot&amp;quot;/&amp;gt;&#xD;
  &amp;lt;gfe-data:snapshot-export locator=&amp;quot;/path/to/export/example.snapshot&amp;quot;/&amp;gt;&#xD;
&amp;lt;/gfe-data:snapshot-service&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can learn more about how Spring Data GemFire supports ZIP files on import, the use of Spring &lt;code&gt;ApplicationEvents&lt;/code&gt; to trigger import and export snapshots as well as how to appropriately filter data imported and exported &lt;a href="http://docs.spring.io/spring-data-gemfire/docs/1.7.0.RELEASE/reference/html/#bootstrap:snapshot"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;!--&#xD;
That is all on the GemFire side for now.  See the [changelog](https://github.com/spring-projects/spring-data-gemfire/blob/master/docs/src/info/changelog.txt) for more specifics. As always, contributions and feedback are welcomed on GitHub ([PR](https://github.com/spring-projects/spring-data-gemfire/pulls)), in [JIRA](https://jira.spring.io/browse/SGF) and on the [forums](http://stackoverflow.com/questions/tagged/spring-data-gemfire).&#xD;
--&gt;&lt;h2&gt;&lt;a href="#spring-data-keyvalue-amp-map-based-repositories" class="anchor" name="spring-data-keyvalue-amp-map-based-repositories"&gt;&lt;/a&gt;Spring Data KeyValue &amp;amp; Map based repositories&lt;/h2&gt;&lt;p&gt;It&amp;rsquo;s been quite a long time since we&amp;rsquo;ve been asked to provide a very simple &lt;code&gt;Map&lt;/code&gt; based implementation for Spring Data repositories for various – mostly testing – purposes. The requests eventually concluded in revitalizing the &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/1.0.0.RELEASE/reference/html/"&gt;KeyValue module&lt;/a&gt; in a slightly different way than it existed in before.&lt;/p&gt;&lt;p&gt;Spring Data KeyValue now consists of a basic &lt;code&gt;Map&lt;/code&gt; based repository implementation that will use Spring Expression Language (SpEL) for querying values by default, provide sorting, pagination and Querydsl integration based on its collection module. It also exposes dedicated APIs to allow key-value stores to leverage store specific optimizations in storage, retrieval and most importantly query execution if needed.&lt;/p&gt;&lt;p&gt;The default query mechanism used by Spring Data KeyValue repositories is based on SpEL and allows you to define and run complex queries. This approach shows off its real power when run in &lt;a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html#expressions-spel-compilation"&gt;&lt;code&gt;COMPILED&lt;/code&gt; mode&lt;/a&gt; as it effectively compiles the filter expressions to be executed on the values. Alternatively you also can use Querydsl expressions for typesafe querying.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Configuration&#xD;
@EnableMapRepositories(&amp;quot;com.acme.repositories&amp;quot;)&#xD;
class AppConfig {}&#xD;
&#xD;
@KeySpace(&amp;quot;user&amp;quot;)&#xD;
class User {&#xD;
&#xD;
  String @Id id;&#xD;
  String firstname;&#xD;
}&#xD;
&#xD;
interface UserRepository extends CrudRepository&amp;lt;User, String&amp;gt; {&#xD;
  List&amp;lt;String&amp;gt; findByFirstnameStartingWith(String firstname);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We currently have extensions of that API cooking for Ehcache, &lt;a href="https://github.com/hazelcast-incubator/spring-data-integrations-commons/tree/develop"&gt;Hazelcast&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-data-aerospike"&gt;Aerospike&lt;/a&gt; and are looking forward to evaluate options to also integrate Redis and maybe port some of the Gemfire APIs to use that.&lt;/p&gt;&lt;h2&gt;&lt;a href="#what-rsquo-s-next" class="anchor" name="what-rsquo-s-next"&gt;&lt;/a&gt;What&amp;rsquo;s next?&lt;/h2&gt;&lt;p&gt;Up next is &lt;a href="http://www.springone2gx.com/"&gt;SpringOne2GX in Washington, DC&lt;/a&gt;- we&amp;rsquo;d be happy to see you there - the best place to get in touch with the team, learn about new features and simply have a good time. Meanwhile we are already preparing the next service release for the Fowler Release Train and started working on new features for the Hopper release train (Sshh&amp;hellip; We&amp;rsquo;ll give a sneak peak on Hopper in the &lt;a href="https://2015.event.springone2gx.com/schedule/sessions/what_s_new_in_2015_for_spring_data.html"&gt;“What’s new in Spring Data?” talk&lt;/a&gt; at SpringOne).&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 1.3.0.M5 Available Now</title>
    <link rel="alternate" href="https://spring.io/blog/2015/09/04/spring-boot-1-3-0-m5-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Phil Webb</name>
    </author>
    <id>tag:spring.io,2015-09-04:2228</id>
    <updated>2015-09-04T02:02:00Z</updated>
    <content type="html">&lt;p&gt;Spring Boot v1.3.0.M5 is available now from the &lt;a href="http://repo.springsource.org/milestone/"&gt;Spring milestone repository&lt;/a&gt;. Just in time for SpringOne 2GX, this release closes &lt;a href="https://github.com/spring-projects/spring-boot/issues?q=milestone%3A1.3.0.M5+is%3Aissue+is%3Aclosed"&gt;almost 50 issues&lt;/a&gt; and merges &lt;a href="https://github.com/spring-projects/spring-boot/pulls?utf8=%E2%9C%93&amp;q=is%3Apr+is%3Aclosed+milestone%3A1.3.0.M3"&gt;15 pull-requests&lt;/a&gt;! Thanks &lt;em&gt;again&lt;/em&gt; to everyone that has contributed.&lt;/p&gt;&lt;p&gt;Highlights of the new release include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Lots of bug fixes and stabilization as we head towards RC1&lt;/li&gt;
  &lt;li&gt;Support for javax &lt;code&gt;@WebServlet&lt;/code&gt;, &lt;code&gt;@WebFilter&lt;/code&gt; and &lt;code&gt;@WebListener&lt;/code&gt; annotations&lt;/li&gt;
  &lt;li&gt;Auto-configuration for Hazelcast&lt;/li&gt;
  &lt;li&gt;Improved &amp;ldquo;root first&amp;rdquo; exception logging&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For a complete list of changes, and upgrade instructions, see the &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-1.3-Release-Notes"&gt;Spring Boot 1.3 Release Notes&lt;/a&gt; on the wiki and the updated &lt;a href="http://docs.spring.io/spring-boot/docs/1.3.0.M5/reference/htmlsingle/"&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href="http://projects.spring.io/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle"&gt;Documentation&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;&lt;a href="#springone-2gx-2015-is-around-the-corner" class="anchor" name="springone-2gx-2015-is-around-the-corner"&gt;&lt;/a&gt;SpringOne 2GX 2015 is around the corner!&lt;/h1&gt;&lt;p&gt;Book your place at &lt;a href="http://www.springone2gx.com"&gt;SpringOne2GX in Washington, DC&lt;/a&gt; soon. It&amp;rsquo;s simply the best opportunity to find out first hand all that&amp;rsquo;s going on and to provide direct feedback. Join Brian and Stéphane for an &lt;a href="https://2015.event.springone2gx.com/schedule/sessions/intro_to_spring_boot_for_the_web_tier.html"&gt;intro to Spring Boot for the web tier&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring LDAP 2.0.4 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/09/02/spring-ldap-2-0-4-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Rob Winch</name>
    </author>
    <id>tag:spring.io,2015-09-02:2226</id>
    <updated>2015-09-02T16:20:52Z</updated>
    <content type="html">&lt;p&gt;I’m pleased to announce the release of Spring LDAP 2.0.4.RELEASE. The highlights of this release include:&lt;/p&gt;&lt;p&gt;&lt;a href="https://jira.spring.io/browse/LDAP-333"&gt;LDAP-333&lt;/a&gt; - Support for Spring Data Commons 1.11 (Spring Data Gosling)&lt;br/&gt;&lt;a href="https://jira.spring.io/browse/LDAP-334"&gt;LDAP-334 &lt;/a&gt; - Compatibility with Spring IO Platform 2.0&lt;br/&gt;&lt;a href="https://jira.spring.io/browse/LDAP-335"&gt;LDAP-335&lt;/a&gt; - Fix NoClassDefFoundError: RepositoryConfigurationExtension&lt;/p&gt;&lt;p&gt;For additional information on the release, refer to the &lt;a href="https://jira.spring.io/jira/secure/ReleaseNote.jspa?projectId=10071&amp;version=15001"&gt;changelog&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href="http://projects.spring.io/spring-ldap/"&gt;Project Site&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-ldap/docs/2.0.4.RELEASE/reference/"&gt;Reference&lt;/a&gt; | &lt;a href="https://jira.spring.io/browse/LDAP"&gt;Issues&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Web Flow 2.4.2 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/09/01/spring-web-flow-2-4-2-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Rossen Stoyanchev</name>
    </author>
    <id>tag:spring.io,2015-09-01:2225</id>
    <updated>2015-09-01T14:18:00Z</updated>
    <content type="html">&lt;p&gt;A minor maintenance release of Spring Web Flow is now available for use. The release addresses compatibility issues against Spring Security 4.0 and the Mojarra and Apache MyFaces JSF implementations. For a list of the addressed issues see the &lt;a href="https://jira.spring.io/jira/secure/ReleaseNote.jspa?projectId=10050&amp;version=14796"&gt;release notes&lt;/a&gt; JIRA report.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Statemachine 1.0.0.RC1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/09/01/spring-statemachine-1-0-0-rc1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Janne Valkealahti</name>
    </author>
    <id>tag:spring.io,2015-08-31:2221</id>
    <updated>2015-09-01T12:31:39Z</updated>
    <content type="html">&lt;p&gt;We’re pleased to announce a first release candicate of &lt;a href="http://projects.spring.io/spring-statemachine/"&gt;Spring Statemachine&lt;/a&gt; 1.0.0.RC1.&lt;/p&gt;&lt;p&gt;Focus of this release is to get core framework more stable and finally add jepsen tests for a distributed state machine. We also added a first version of a testing support. Resolved github tickets can be found from &lt;a href="https://github.com/spring-projects/spring-statemachine/issues?q=milestone%3A1.0.0.RC1+is%3Aclosed"&gt;RC1 issues&lt;/a&gt;. We&amp;rsquo;re relatively close to issue a release version, meaning if nothing major pop-up, next release will be a &lt;code&gt;1.0.0.RELEASE&lt;/code&gt;. If something urgent turns up we will do &lt;code&gt;1.0.0.RC2&lt;/code&gt; prior to a release.&lt;/p&gt;&lt;p&gt;Now that we&amp;rsquo;re here, let&amp;rsquo;s crack it and see what new features we have in this release.&lt;/p&gt;&lt;p&gt;Beyond usual bug fixes here is a list of main new features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Testing support&lt;/li&gt;
  &lt;li&gt;Jepsen tests for a Distributed State Machine&lt;/li&gt;
&lt;/ul&gt;&lt;h1&gt;&lt;a href="#testing-support" class="anchor" name="testing-support"&gt;&lt;/a&gt;Testing support&lt;/h1&gt;&lt;p&gt;Testing a state machine is not easiest task to accomplish and thus we&amp;rsquo;re introcuding new &lt;code&gt;spring-statemachine-test&lt;/code&gt; module which will ease a process of making unit tests for a Spring Statemachine. Due to dependencies it&amp;rsquo;s not used in a core system but what comes for a &lt;code&gt;recipes&lt;/code&gt; and a &lt;code&gt;Zookeeper&lt;/code&gt; integration it is already used to test those modules.&lt;/p&gt;&lt;p&gt;Testing a simple state machine in a tests will look simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;StateMachine&amp;lt;String, String&amp;gt; machine = buildMachine();&#xD;
StateMachineTestPlan&amp;lt;String, String&amp;gt; plan =&#xD;
  StateMachineTestPlanBuilder.&amp;lt;String, String&amp;gt;builder()&#xD;
    .defaultAwaitTime(2)&#xD;
    .stateMachine(machine)&#xD;
    .step()&#xD;
      .expectStates(&amp;quot;SI&amp;quot;)&#xD;
      .and()&#xD;
    .step()&#xD;
      .sendEvent(&amp;quot;E1&amp;quot;)&#xD;
      .expectStateChanged(1)&#xD;
      .expectStates(&amp;quot;S1&amp;quot;)&#xD;
      .and()&#xD;
    .build();&#xD;
plan.test();&#xD;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;if having a state machine defined as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;StateMachine&amp;lt;String, String&amp;gt; buildMachine()&#xD;
    throws Exception {&#xD;
  StateMachineBuilder.Builder&amp;lt;String, String&amp;gt; builder =&#xD;
    StateMachineBuilder.builder();&#xD;
&#xD;
  builder.configureConfiguration()&#xD;
    .withConfiguration()&#xD;
      .taskExecutor(new SyncTaskExecutor())&#xD;
      .autoStartup(true);&#xD;
&#xD;
  builder.configureStates()&#xD;
    .withStates()&#xD;
      .initial(&amp;quot;SI&amp;quot;)&#xD;
      .state(&amp;quot;S1&amp;quot;);&#xD;
&#xD;
  builder.configureTransitions()&#xD;
    .withExternal()&#xD;
      .source(&amp;quot;SI&amp;quot;).target(&amp;quot;S1&amp;quot;)&#xD;
      .event(&amp;quot;E1&amp;quot;);&#xD;
&#xD;
   return builder.build();&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;a href="#jepsen-tests" class="anchor" name="jepsen-tests"&gt;&lt;/a&gt;Jepsen tests&lt;/h1&gt;&lt;p&gt;Our support for using distributed states with a Zookeeker turned out to be relatively difficult to test with a normal set of unit tests and thus we hit a wall with a test coverage. I&amp;rsquo;d like to use this moment to tell something about testing distributed systems with jepsen.&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/aphyr/jepsen"&gt;Jepsen&lt;/a&gt; testing framework by Kyle Kingsbury (aka &lt;a href="https://twitter.com/aphyr"&gt;@aphyr&lt;/a&gt;) is a system what can be used to test distibuted systems and have a features like synchronizing events sent into a nodes and causing a brain splits on a network. Jepsen will be a core of our system to make sure that our distributed support will do what it it supposed to do. This is a first class system to test Spring Distributed Statemachine backed by a &lt;code&gt;Zookeeper&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;There&amp;rsquo;s going to be a separate blog post for this but preliminary results can be found from our reference docs &lt;a href="http://docs.spring.io/spring-statemachine/docs/1.0.0.RC1/reference/htmlsingle/#appendices-zookeeper"&gt;Distributed State Machine Technical Paper&lt;/a&gt;. Stay stuned about that blog post!&lt;/p&gt;&lt;p&gt;In here we take a peek from our jepsen tests to show what happens when a cluster suffers a split which is causing a zookeeper ensemble to totally break and what happes when a network is break and healed.&lt;/p&gt;&lt;p&gt;&lt;img src="http://docs.spring.io/spring-statemachine/docs/1.0.0.RC1/reference/htmlsingle/images/sm-tech-partition-half-2.png" alt="Zookeeper Sample" /&gt;&lt;/p&gt;&lt;p&gt;In above graph we have a 5 node cluster sharing a same state machine configuration backed by a &lt;code&gt;Zookeeper&lt;/code&gt; ensemble where each node is connecting to its own local instance. First an event &lt;code&gt;C&lt;/code&gt; is sent into all machines(only one will handle a distributed state change) which will initiate distributed transition from state &lt;code&gt;S21&lt;/code&gt; into &lt;code&gt;S211&lt;/code&gt;. Network is then break and graph is showing how each machine eventually will end up into an error state. When network and &lt;code&gt;Zookeeper&lt;/code&gt; ensemble is later healed, all machines will re-join an ensemble and sync their states. Finally event &lt;code&gt;K&lt;/code&gt; is send, again to all machines, to show that all machines are working properly after network problems has been healed.&lt;/p&gt;&lt;p&gt;As mentioned in our documentation, if existing zookeer leader is kept in minority all instances are disconnected from ensemble, thus causing all state machines to enter into an error state. This situation is then resolved automatically later when network is healed and zookeeper emsemble fixes itself and state machines connected to it can reset their own states.&lt;/p&gt;&lt;h1&gt;&lt;a href="#springone-2gx-2015-is-around-the-corner" class="anchor" name="springone-2gx-2015-is-around-the-corner"&gt;&lt;/a&gt;SpringOne 2GX 2015 is around the corner!&lt;/h1&gt;&lt;p&gt;Book your place at &lt;a href="http://www.springone2gx.com"&gt;SpringOne2GX in Washington, DC soon&lt;/a&gt;. It&amp;rsquo;s simply the best opportunity to find out first hand all that&amp;rsquo;s going on and to provide direct feedback.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Framework 4.2.1 Available Now</title>
    <link rel="alternate" href="https://spring.io/blog/2015/09/01/spring-framework-4-2-1-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Stéphane Nicoll</name>
    </author>
    <id>tag:spring.io,2015-09-01:2224</id>
    <updated>2015-09-01T12:25:00Z</updated>
    <content type="html">&lt;p&gt;It is my pleasure to announce that Spring Framework 4.2.1 is available from repo.spring.io and Maven Central. This first maintenance release in the 4.2 line contains &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10000&amp;version=15226"&gt;a wide range of fixes for regressions and other issues&lt;/a&gt; reported against 4.2 GA.&lt;/p&gt;&lt;p&gt;4.2.1 also contains minor enhancements: refinement of our Jackson support (see &lt;a href="https://spring.io/blog/2014/12/02/latest-jackson-integration-improvements-in-spring"&gt;Sébastien&amp;rsquo;s updated blog post&lt;/a&gt;), meta-annotation processing improvements (&lt;code&gt;@AliasFor&lt;/code&gt;), third-party dependencies alignment (including Hibernate 5.0 GA).&lt;/p&gt;&lt;p&gt;We strongly recommend an immediate upgrade to 4.2.1 for all 4.x users. The Spring Framework team is now working towards Spring Framework 4.2.2 in early October, which will be the foundation for the upcoming Spring Boot 1.3 GA release. We will also release 4.1.8 at the same time: if there is anything you’d like to get fixed in the 4.1.x branch still, now is the time to raise it!&lt;/p&gt;&lt;p&gt;&lt;a href="http://projects.spring.io/spring-framework/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework"&gt;GitHub&lt;/a&gt; | &lt;a href="https://jira.spring.io/browse/SPR"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/htmlsingle/"&gt;Documentation&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Join Sam Brannen and Nicolas Fränkel to discover &lt;a href="https://2015.event.springone2gx.com/schedule/sessions/get_the_most_out_of_testing_with_spring_4_2.html"&gt;what&amp;rsquo;s new in Spring Framework 4.2&amp;rsquo;s testing support&lt;/a&gt; at SpringOne2GX in Washington in two weeks. It&amp;rsquo;s not too late to get a ticket if you want to learn about all of the latest and greatest first hand.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - September 1, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/09/01/this-week-in-spring-september-1-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-09-01:2223</id>
    <updated>2015-09-01T12:08:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! The Spring team is hard at work on all the latest and greatest ahead of the SpringOne2GX event in Washington DC! Time is &lt;em&gt;really&lt;/em&gt; flying! I can&amp;rsquo;t &lt;em&gt;beleive&lt;/em&gt; what we&amp;rsquo;re staring down September already! This week I&amp;rsquo;m in Tokyo, Japan, participating in the Spring User Group&amp;rsquo;s &lt;em&gt;huge&lt;/em&gt; &lt;em&gt;Spring in Summer&lt;/em&gt; event where &lt;a href="https://speakerdeck.com/joshlong/the-macro-of-microservices"&gt;I gave a keynote&lt;/a&gt; and two talks, on Spring Boot and Spring Cloud. The one day event attracted some of the company&amp;rsquo;s largest websites and was a &lt;em&gt;lot&lt;/em&gt; of fun!&lt;/p&gt;&lt;p&gt;Anyway, without further ado, let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2015/09/01/spring-data-release-train-gosling-goes-ga"&gt;Spring Data Gosling goes GA!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring ninja Greg Turnquist just announced the first installment of &lt;a href="https://spring.io/blog/2015/09/01/react-js-and-spring-data-rest-part-1-basic-features"&gt;his tutorial on using Spring with React.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Erik, of the &lt;em&gt;Programming with Erik&lt;/em&gt; blog, has put together &lt;a href="http://www.programwitherik.com/trying-out-spring-boot-with-ember-and-a-site-update/"&gt;an interesting post on using Spring Boot with Ember.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I dig this blog that answers the question, &lt;a href="https://www.openprogrammer.info/2015/08/25/why-jhipster-angularjs-spring-boot-liquibase-mongodb-elasticsearch/"&gt;&lt;em&gt;Why JHipster?&lt;/em&gt;&lt;/a&gt; (JHipster is a &lt;code&gt;yeoman&lt;/code&gt; code-generator for Angular.js frontends and Spring Boot backends)&lt;/li&gt;
  &lt;li&gt;The Kotan code blog has a &lt;a href="http://www.kotancode.com/2015/08/26/securing-a-spring-boot-microservice/"&gt;nice post on securing Spring Boot webservices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This Russian-language post looks at &lt;a href="http://habrahabr.ru/post/265511/"&gt;how to use Java FX and Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This blog looks at &lt;a href="http://samchu.logdown.com/posts/292630-use-springcloud-to-synchronize-all-nodes-configuration"&gt;the Spring Cloud configuration server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Biju Kunjummen has a nice post on using &lt;a href="https://dzone.com/articles/spring-boot-static-web-resource-handling-w-yeoman"&gt;Spring Boot static web resource handling with Yeoman for single page applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Springfox - not associated with any project from Pivotal - &lt;a href="http://springfox.github.io/springfox/docs/snapshot/"&gt;is an evolution of the Spring MVC and Swagger integration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Endy Muhardin has published a video &lt;a href="https://www.youtube.com/watch?v=Ptf1JdD-9jg"&gt;on using Spring Boot support for JPA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Krishna Srinivasan has put together &lt;a href="http://www.javabeat.net/spring-boot-actuator/"&gt;a nice guide on using the Spring Boot Actuator framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Toolsuite Lead Martin Lippert&amp;rsquo;s entry into the Eclipse newsletter &lt;a href="http://www.eclipse.org/community/eclipse_newsletter/2015/august/article2.php"&gt;on the value of STS for Spring is a pretty good, succinct, read&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Our pal, Shin Tanimoto, has put together &lt;a href="http://www.slideshare.net/shintanimoto/spring-boot10"&gt;an &lt;em&gt;amazing&lt;/em&gt; Japanese-language slidedeck on using Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Data Release Train Gosling Goes GA</title>
    <link rel="alternate" href="https://spring.io/blog/2015/09/01/spring-data-release-train-gosling-goes-ga" />
    <category term="releases" label="Releases" />
    <author>
      <name>Oliver Gierke</name>
    </author>
    <id>tag:spring.io,2015-09-01:2222</id>
    <updated>2015-09-01T11:34:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the Spring Data team I&amp;rsquo;d like to announce the general availability of the Spring Data release train Gosling. Over the last 6 months we&amp;rsquo;ve fixed 344 tickets in total, &lt;a href="https://jira.spring.io/issues/?filter=15230"&gt;56 of that&lt;/a&gt; after the latest release candidate.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Upgraded Spring baseline to 4.1.&lt;/li&gt;
  &lt;li&gt;Easier implementability of custom repository code (per repo, see the &lt;a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.custom-behaviour-for-all-repositories"&gt;reference documentation&lt;/a&gt;) .&lt;/li&gt;
  &lt;li&gt;Improved compatibility with Hibernate 5 (JPA module).&lt;/li&gt;
  &lt;li&gt;SpEl support for &lt;code&gt;@Query&lt;/code&gt; methods in MongoDB (see this &lt;a href="https://github.com/spring-projects/spring-data-examples/tree/master/mongodb/security"&gt;example&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Support to create Querydsl &lt;code&gt;Predicates&lt;/code&gt; from web requests (see the &lt;a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#core.web.type-safe"&gt;reference documentation&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;A &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/1.0.0.RELEASE/reference/html/"&gt;new Spring Data KeyValue module&lt;/a&gt; for &lt;code&gt;Map&lt;/code&gt;-backed repositories using SpEL as query language.&lt;/li&gt;
  &lt;li&gt;Improved POST forms for the HAL browser in Spring Data REST.&lt;/li&gt;
  &lt;li&gt;Support for internationalization of enum values and link titles in Spring Data REST.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The &lt;a href="https://github.com/spring-projects/spring-data-examples"&gt;Spring Data examples&lt;/a&gt; have already been upgraded to the new version. Find a more detailed list of what has change in this train in &lt;a href="https://github.com/spring-projects/spring-data-commons/wiki/Release-Train-Gosling"&gt;our wiki&lt;/a&gt;. Spring Data ninja Christoph Strobl has a &lt;a href="https://spring.io/blog/2015/09/04/what-s-new-in-spring-data-release-gosling"&gt;blog post&lt;/a&gt; covering some of the introduced features in more depth.&lt;/p&gt;&lt;p&gt;To upgrade to the new release train use the BOM we ship as described in our &lt;a href="https://github.com/spring-projects/spring-data-examples/tree/master/bom"&gt;examples repository&lt;/a&gt; and configure its version to &lt;code&gt;Gosling-RELEASE&lt;/code&gt;. If you&amp;rsquo;re using Spring Boot, upgrading to the release train is as easy as setting the Maven property &lt;code&gt;spring-data-releasetrain.version&lt;/code&gt; to that version. Note, that to use Spring Data REST with Boot 1.2, you also need to upgrade to Spring HATEOAS 0.19.0.RELEASE (by setting the &lt;code&gt;spring-hateoas.version&lt;/code&gt; property) and Jackson 2.5 or better (current 2.6.1 preferred, via the &lt;code&gt;jackson.version&lt;/code&gt; property).&lt;/p&gt;&lt;p&gt;The &lt;a href="https://github.com/spring-projects/spring-data-commons/wiki/Release-Train-Hopper"&gt;next release train&lt;/a&gt; is going to be named &lt;a href="https://en.wikipedia.org/wiki/Grace_Hopper"&gt;Hopper&lt;/a&gt; and include the new major versions of the Neo4j, Couchbase and Solr modules. Target release time is mid autumn.&lt;/p&gt;&lt;p&gt;For reference, here is the list of all modules of the train:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 1.11 GA - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/1.11.0.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/1.11.0.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/1.11.0.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/1.11.0.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 1.9 GA - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/1.9.0.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/1.9.0.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/1.9.0.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/1.9.0.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 1.8 GA - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/1.8.0.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/1.8.0.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/1.8.0.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/1.8.0.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 3.4 GA - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/3.4.0.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/3.4.0.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/3.4.0.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/3.4.0.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Solr 1.5 GA - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/1.5.0.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/1.5.0.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/1.5.0.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/1.5.0.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 1.4 GA - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/1.4.0.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/1.4.0.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/1.4.0.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/1.4.0.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Cassandra 1.3 GA - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/1.3.0.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/1.3.0.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/1.3.0.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/1.3.0.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 1.3 GA - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/1.3.0.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/1.3.0.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/1.3.0.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/1.3.0.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 1.7 GA - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/1.7.0.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/1.7.0.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/1.7.0.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/1.7.0.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 1.6 GA - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/1.6.0.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/1.6.0.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/1.6.0.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/1.6.0.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 2.4 GA - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/2.4.0.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/2.4.0.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/2.4.0.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/2.4.0.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 1.0 GA - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/1.0.0.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/1.0.0.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/1.0.0.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/1.0.0.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We&amp;rsquo;re going to cover a lot of the new features of Spring Data release train Gosling in the &lt;a href="https://2015.event.springone2gx.com/schedule/sessions/what_s_new_in_2015_for_spring_data.html"&gt;&amp;ldquo;What&amp;rsquo;s new in Spring Data?&amp;rdquo; talk&lt;/a&gt; at SpringOne2GX in Washington in two weeks. It&amp;rsquo;s not too late to get a ticket if you want to learn about all of the latest and greatest first hand.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>React.js and Spring Data REST: Part 1 - Basic Features</title>
    <link rel="alternate" href="https://spring.io/blog/2015/09/01/react-js-and-spring-data-rest-part-1-basic-features" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Greg Turnquist</name>
    </author>
    <id>tag:spring.io,2015-08-28:2220</id>
    <updated>2015-09-01T11:33:06Z</updated>
    <content type="html">&lt;div id="preamble"&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Welcome Spring community,&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;This is the first of several blog entries. In this session, you will see how to get a bare-bones Spring Data REST application up and running quickly. Then you will build a simple UI on top of it using Facebook&amp;#8217;s React.js toolset.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_step_0_setting_up_your_environment"&gt;Step 0 - Setting up your environment&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Feel free to &lt;a href="https://github.com/gregturn/react-and-spring-data-rest/tree/master/basic"&gt;grab the code&lt;/a&gt; from this repository and follow along.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;If you want to do it yourself, visit &lt;a href="http://start.spring.io" class="bare"&gt;http://start.spring.io&lt;/a&gt; and pick these items:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="ulist"&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;Rest Repositories&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;Thymeleaf&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
JPA&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
H2&#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;This demo uses Java 8, Maven Project, and the latest stable release of Spring Boot. This will give you a clean, empty project. From there, you can add the various files shown explicitly in this session, and/or borrow from the repository listed above.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_in_the_beginning"&gt;In the beginning&amp;#8230;&amp;#8203;&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;In the beginning there was data. And it was good. But then people wanted to access the data through various means. Over the years, people cobbled together lots of MVC controllers, many using Spring&amp;#8217;s powerful REST support. But doing over and over cost a lot of time.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Spring Data REST addresses how simple this problem can be if some assumptions are made:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="ulist"&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;&#xD;
The developer uses a Spring Data project that supports the repository model.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
The system uses well accepted, industry standard protocols, like HTTP verbs, standardized media types, and IANA-approved link names.&#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="sect2"&gt;&#xD;
&lt;h3 id="_declaring_your_domain"&gt;Declaring your domain&lt;/h3&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;The cornerstone of any Spring Data REST-based application are the domain objects. For this session, you will build an application to track the employees for a company. Kick that off by creating a data type like this:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="title"&gt;src/main/java/com/greglturnquist/payroll/Employee.java&lt;/div&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Data&#xD;
@Entity&#xD;
public class Employee {&#xD;
&#xD;
	private @Id @GeneratedValue Long id;&#xD;
	private String firstName;&#xD;
	private String lastName;&#xD;
	private String description;&#xD;
&#xD;
	private Employee() {}&#xD;
&#xD;
	public Employee(String firstName, String lastName, String description) {&#xD;
		this.firstName = firstName;&#xD;
		this.lastName = lastName;&#xD;
		this.description = description;&#xD;
	}&#xD;
}&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="ulist"&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;&#xD;
&lt;code&gt;@Entity&lt;/code&gt; is a JPA annotation that denotes the whole class for storage in a relational table.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
&lt;code&gt;@Id&lt;/code&gt; and &lt;code&gt;@GeneratedValue&lt;/code&gt; are JPA annotation to note the primary key and that is generated automatically when needed.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
&lt;code&gt;@Data&lt;/code&gt; and &lt;code&gt;@RequiredArgsConstructor&lt;/code&gt; are Project Lombok annotations to autogenerate getters, setters, constructors, toString, hash, equals, and other things. It cuts down on the boilerplate.&#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;This entity is used to track employee information. In this case, their name and job description.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="admonitionblock note"&gt;&#xD;
&lt;table&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="icon"&gt;&#xD;
&lt;div class="title"&gt;Note&lt;/div&gt;&#xD;
&lt;/td&gt;&#xD;
&lt;td class="content"&gt;&#xD;
Spring Data REST isn&amp;#8217;t confined to JPA. It supports many NoSQL data stores, but you won&amp;#8217;t be covering those here.&#xD;
&lt;/td&gt;&#xD;
&lt;/tr&gt;&#xD;
&lt;/table&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_defining_the_repository"&gt;Defining the repository&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Another key piece of a Spring Data REST application is to create a corresponding repository definition.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="title"&gt;src/main/java/com/greglturnquist/payroll/EmployeeRepository.java&lt;/div&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;public interface EmployeeRepository extends CrudRepository&amp;lt;Employee, Long&amp;gt; {&#xD;
&#xD;
}&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="ulist"&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;&#xD;
The repository extends Spring Data Commons' &lt;code&gt;CrudRepository&lt;/code&gt; and plugs in the type of the domain object and its primary key&#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;That is all that is needed! In fact, you don&amp;#8217;t even have to annotate this invisible if its top-level and visible. If you use your IDE and open up &lt;code&gt;CrudRepository&lt;/code&gt;, you&amp;#8217;ll find a fist full of pre-built methods already defined.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="admonitionblock note"&gt;&#xD;
&lt;table&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="icon"&gt;&#xD;
&lt;div class="title"&gt;Note&lt;/div&gt;&#xD;
&lt;/td&gt;&#xD;
&lt;td class="content"&gt;&#xD;
You can define &lt;a href="http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.definition"&gt;your own repository&lt;/a&gt; if you wish. Spring Data REST supports that as well.&#xD;
&lt;/td&gt;&#xD;
&lt;/tr&gt;&#xD;
&lt;/table&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_pre_loading_the_demo"&gt;Pre-loading the demo&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;To work this this application, you need to pre-load it with some data like this:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="title"&gt;src/main/java/com/greglturnquist/payroll/DatabaseLoader.java&lt;/div&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Component&#xD;
public class DatabaseLoader implements CommandLineRunner {&#xD;
&#xD;
	private final EmployeeRepository repository;&#xD;
&#xD;
	@Autowired&#xD;
	public DatabaseLoader(EmployeeRepository repository) {&#xD;
		this.repository = repository;&#xD;
	}&#xD;
&#xD;
	@Override&#xD;
	public void run(String... strings) throws Exception {&#xD;
		this.repository.save(new Employee("Frodo", "Baggins", "ring bearer"));&#xD;
	}&#xD;
}&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="ulist"&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;&#xD;
This class is marked with Spring&amp;#8217;s &lt;code&gt;@Component&lt;/code&gt; annotation so that it is automatically picked up by &lt;code&gt;@SpringBootApplication&lt;/code&gt;.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
It implements Spring Boot&amp;#8217;s &lt;code&gt;CommandLineRunner&lt;/code&gt; so that it gets run after all the beans are created and registered.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
It uses constructor injection and autowiring to get Spring Data&amp;#8217;s automatically created &lt;code&gt;EmployeeRepository&lt;/code&gt;.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
The &lt;code&gt;run()&lt;/code&gt; method is invoked with command line arguments, loading up your data.&#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;One of the biggest, most powerful features Spring Data is its ability to write JPA queries for you. This not only cuts down on your development time, but also reduces the risk of bugs and errors. Spring Data &lt;a href="http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.details"&gt;looks at the name of methods&lt;/a&gt; in a repository class and figures out the operation you need including saving, deleting, and finding.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;That is how we can write an empty interface and inherit already build save, find, and delete operations.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_adjusting_the_root_uri"&gt;Adjusting the root URI&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;By default, Spring Data REST hosts a root collection of links at &lt;code&gt;/&lt;/code&gt;. Because you will host a web UI on the same path, you need to change the root URI.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="title"&gt;src/main/resources/application.properties&lt;/div&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre&gt;spring.data.rest.base-path=/api&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_launching_the_backend"&gt;Launching the backend&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;The last step needed to get a fully operationl REST API off the ground is to write a &lt;code&gt;public static void main&lt;/code&gt; using Spring Boot:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="title"&gt;src/main/java/com/greglturnquist/payroll/ReactAndSpringDataRestApplication.java&lt;/div&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@SpringBootApplication&#xD;
public class ReactAndSpringDataRestApplication {&#xD;
&#xD;
	public static void main(String[] args) {&#xD;
		SpringApplication.run(ReactAndSpringDataRestApplication.class, args);&#xD;
	}&#xD;
}&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Assuming the previous class as well as your Maven build file were generated from &lt;a href="http://start.spring.io" class="bare"&gt;http://start.spring.io&lt;/a&gt;, you can now launch it either by running that &lt;code&gt;main()&lt;/code&gt; method inside your IDE, or type &lt;code&gt;./mvnw spring-boot:run&lt;/code&gt; on the command line. (mvnw.bat for Windows users).&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="admonitionblock note"&gt;&#xD;
&lt;table&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="icon"&gt;&#xD;
&lt;div class="title"&gt;Note&lt;/div&gt;&#xD;
&lt;/td&gt;&#xD;
&lt;td class="content"&gt;&#xD;
If you aren&amp;#8217;t up-to-date on Spring Boot and how it works, you should consider watch one of &lt;a href="https://www.youtube.com/watch?v=sbPSjI4tt10"&gt;Josh Long&amp;#8217;s introductory presentations&lt;/a&gt;. Did it? Press on!&#xD;
&lt;/td&gt;&#xD;
&lt;/tr&gt;&#xD;
&lt;/table&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_touring_your_rest_service"&gt;Touring your REST service&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;With the app running, you can check things out on the command line using &lt;a href="http://curl.haxx.se/"&gt;cURL&lt;/a&gt; (or any other tool you like).&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre&gt;$ curl localhost:8080/api&#xD;
{&#xD;
  "_links" : {&#xD;
    "employees" : {&#xD;
      "href" : "http://localhost:8080/api/employees"&#xD;
    },&#xD;
    "profile" : {&#xD;
      "href" : "http://localhost:8080/api/profile"&#xD;
    }&#xD;
  }&#xD;
}&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;When you ping the root node, you get back a collection of links wrapped up in a &lt;a href="http://stateless.co/hal_specification.html"&gt;HAL-formatted JSON document&lt;/a&gt;.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="ulist"&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;&#xD;
&lt;strong&gt;_links&lt;/strong&gt; is a the collection of links available.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
&lt;strong&gt;employees&lt;/strong&gt; points to an aggregate root for the employee objects defined by the &lt;code&gt;EmployeeRepository&lt;/code&gt; interface.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
&lt;strong&gt;profile&lt;/strong&gt; is an IANA-standard relation and points to discoverable metadata about the entire service. We&amp;#8217;ll explore this in a later session.&#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;You can further dig into this service by navigating the &lt;strong&gt;employees&lt;/strong&gt; link.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre&gt;$ curl localhost:8080/api/employees&#xD;
{&#xD;
  "_embedded" : {&#xD;
    "employees" : [ {&#xD;
      "firstName" : "Frodo",&#xD;
      "lastName" : "Baggins",&#xD;
      "description" : "ring bearer",&#xD;
      "_links" : {&#xD;
        "self" : {&#xD;
          "href" : "http://localhost:8080/api/employees/1"&#xD;
        }&#xD;
      }&#xD;
    } ]&#xD;
  }&#xD;
}&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;At this stage, you are viewing the entire collection of employees.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;What&amp;#8217;s included along with the data you pre-loaded earlier is a &lt;strong&gt;_links&lt;/strong&gt; attribute with a &lt;strong&gt;self&lt;/strong&gt; link. This is the canonical link for that particular employee. What is canonical? It means free of context. For example, the same user could be fetched through a link like /api/orders/1/processor, in which the employee is assocated with processing a particular order. Here, there is no relationship to other entities.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="admonitionblock important"&gt;&#xD;
&lt;table&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="icon"&gt;&#xD;
&lt;div class="title"&gt;Important&lt;/div&gt;&#xD;
&lt;/td&gt;&#xD;
&lt;td class="content"&gt;&#xD;
Links are a critical facet of REST. They provide the power to navigate to related items. It makes it possible for other parties to navigate around your API without having to rewrite things everytime there is a change. Updates in the client is a common problem when the clients hard code paths to resources. Restructuring resources can cause big upheavals in code. If links are used and instead the navigation route is maintained, then it becomes easy and flexible to make such adjustments.&#xD;
&lt;/td&gt;&#xD;
&lt;/tr&gt;&#xD;
&lt;/table&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;You can decide to view that one employee if you wish.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre&gt;$ curl localhost:8080/api/employees/1&#xD;
{&#xD;
  "firstName" : "Frodo",&#xD;
  "lastName" : "Baggins",&#xD;
  "description" : "ring bearer",&#xD;
  "_links" : {&#xD;
    "self" : {&#xD;
      "href" : "http://localhost:8080/api/employees/1"&#xD;
    }&#xD;
  }&#xD;
}&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Little change here, except that there is no need for the &lt;strong&gt;_embedded&lt;/strong&gt; wrapper since there is only domain object.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;That&amp;#8217;s all and good, but you are probably itching to create some new entries.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre&gt;$ curl -X POST localhost:8080/api/employees -d '{"firstName": "Bilbo", "lastName": "Baggins", "description": "burglar"}' -H 'Content-Type:application/json'&#xD;
{&#xD;
  "firstName" : "Bilbo",&#xD;
  "lastName" : "Baggins",&#xD;
  "description" : "burglar",&#xD;
  "_links" : {&#xD;
    "self" : {&#xD;
      "href" : "http://localhost:8080/api/employees/2"&#xD;
    }&#xD;
  }&#xD;
}&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;You can also PUT, PATCH, and DELETE as shown in &lt;a href="https://spring.io/guides/gs/accessing-data-rest/"&gt;this related guide&lt;/a&gt;. But let&amp;#8217;s not dig into that. You have already spent way too much time interacting with this REST service manually. Don&amp;#8217;t you want to build a slick UI instead?&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_setting_up_a_custom_ui_controller"&gt;Setting up a custom UI controller&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Spring Boot makes it super simple to stand up a custom web page. First, you need a Spring MVC controller.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="title"&gt;src/main/java/com/greglturnquist/payroll/HomeController.java&lt;/div&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Controller&#xD;
public class HomeController {&#xD;
&#xD;
	@RequestMapping(value = "/")&#xD;
	public String index() {&#xD;
		return "index";&#xD;
	}&#xD;
&#xD;
}&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="ulist"&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;&#xD;
&lt;code&gt;@Controller&lt;/code&gt; marks this class as a Spring MVC controller.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
&lt;code&gt;@RequestMapping&lt;/code&gt; flags the &lt;code&gt;index()&lt;/code&gt; method to support the &lt;code&gt;/&lt;/code&gt; route.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
It returns &lt;code&gt;index&lt;/code&gt; as the name of the template, which Spring Boot&amp;#8217;s autoconfigured view resolver will map to &lt;code&gt;src/main/resources/templates/index.html&lt;/code&gt;.&#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_defining_an_html_template"&gt;Defining an HTML template&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;You are using Thymeleaf, although you won&amp;#8217;t really use many of its features.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="title"&gt;src/main/resources/templates/index.html&lt;/div&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-html" data-lang="html"&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xD;
&amp;lt;html xmlns:th="http://www.thymeleaf.org"&amp;gt;&#xD;
&amp;lt;head lang="en"&amp;gt;&#xD;
    &amp;lt;meta charset="UTF-8"/&amp;gt;&#xD;
    &amp;lt;title&amp;gt;ReactJS + Spring Data REST&amp;lt;/title&amp;gt;&#xD;
    &amp;lt;script async="" data-main="/run.js" src="/bower_components/requirejs/require.js"&amp;gt;&amp;lt;/script&amp;gt;&#xD;
    &amp;lt;link rel="stylesheet" href="/main.css" /&amp;gt;&#xD;
&amp;lt;/head&amp;gt;&#xD;
&amp;lt;body&amp;gt;&#xD;
&#xD;
    &amp;lt;div id="react"&amp;gt;&amp;lt;/div&amp;gt;&#xD;
&#xD;
&amp;lt;/body&amp;gt;&#xD;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;The key part in this template is the &lt;code&gt;&amp;lt;div id="react"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; component in the middle. It is where you will direct React to plug in the rendered output.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_loading_javascript_modules"&gt;Loading JavaScript modules&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;This tutorial won&amp;#8217;t go into extensive detail on how it uses require.js to load JavaScript modules. But thanks to the &lt;strong&gt;frontend-maven-plugin&lt;/strong&gt;, you don&amp;#8217;t &lt;em&gt;have&lt;/em&gt; to install any of the node.js tools to build and run the code.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;The following JavaScript modules will be used:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="ulist"&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;&#xD;
require.js&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
react.js&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
rest.js&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
requirejs-react-js&#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;If you&amp;#8217;re interested, the paths for the JavaScript moodules are defined in &lt;a href="https://github.com/gregturn/react-and-spring-data-rest/blob/master/basic/src/main/resources/static/run.js"&gt;run.js&lt;/a&gt;. The main JavaScript app is loaded by the web page through &lt;a href="https://github.com/gregturn/react-and-spring-data-rest/blob/master/basic/src/main/resources/static/main.js"&gt;main.js&lt;/a&gt;.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;With all that in place, you can focus on the React bits which are fetched after the DOM is loaded. It&amp;#8217;s broken down into parts as below:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Since you are using require.js to load things, go ahead and fetch the modules you need:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="title"&gt;src/main/resources/static/app.jsx&lt;/div&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;var React = require('react');&#xD;
var client = require('./client');&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="ulist"&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;&#xD;
&lt;code&gt;React&lt;/code&gt; is the main library from Facebook for building this app.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
&lt;code&gt;client&lt;/code&gt; is custom code that configures rest.js to include support for HAL, URI Templates, and other things. It also sets the default &lt;strong&gt;Accept&lt;/strong&gt; request header to &lt;strong&gt;application/hal+json&lt;/strong&gt;. You can &lt;a href="https://github.com/gregturn/react-and-spring-data-rest/blob/master/basic/src/main/resources/static/client.js"&gt;read the code here&lt;/a&gt;.&#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_diving_into_react"&gt;Diving into React&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;React is based on defining components. Oftentimes, one component can hold multiple instances of another in a parent-child relationship. It&amp;#8217;s easy for this concept to extend several layers.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;To start things off, it&amp;#8217;s very handy to have a top level container for all components. (This will become more evident as you expand upon the code throughout this series.) Right now, you only have the employee list. But you might need some other related components later on, so let&amp;#8217;s start with this:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="title"&gt;src/main/resources/static/app.jsx - App component&lt;/div&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;var App = React.createClass({&#xD;
    getInitialState: function () {&#xD;
        return ({employees: []});&#xD;
    },&#xD;
    componentDidMount: function () {&#xD;
        client({method: 'GET', path: '/api/employees'}).done(response =&amp;gt; {&#xD;
            this.setState({employees: response.entity._embedded.employees});&#xD;
        });&#xD;
    },&#xD;
    render: function () {&#xD;
        return (&#xD;
            &amp;lt;EmployeeList employees={this.state.employees}/&amp;gt;&#xD;
        )&#xD;
    }&#xD;
})&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="ulist"&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;&#xD;
&lt;code&gt;React.createClass({&amp;#8230;&amp;#8203;})&lt;/code&gt; is the method to create a React component.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
&lt;code&gt;getInitialState&lt;/code&gt; is the API to initialize state data (data that is expected to vary).&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
&lt;code&gt;componentDidMount&lt;/code&gt; is the API invoked after React renders a component in the DOM.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;&#xD;
&lt;code&gt;render&lt;/code&gt; is the API to "draw" the component on the screen.&#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="admonitionblock note"&gt;&#xD;
&lt;table&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="icon"&gt;&#xD;
&lt;div class="title"&gt;Note&lt;/div&gt;&#xD;
&lt;/td&gt;&#xD;
&lt;td class="content"&gt;&#xD;
In React, uppercase is the convention for naming components.&#xD;
&lt;/td&gt;&#xD;
&lt;/tr&gt;&#xD;
&lt;/table&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;In the &lt;strong&gt;App&lt;/strong&gt; component, an array of employees is fetched from the Spring Data REST backend and stored in this component&amp;#8217;s &lt;strong&gt;state&lt;/strong&gt; data.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div id="NOTE" class="exampleblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;React components have two types of data: &lt;strong&gt;state&lt;/strong&gt; and &lt;strong&gt;properties&lt;/strong&gt;.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;&lt;strong&gt;State&lt;/strong&gt; is data that the component is expected to handle itself. It is also data that can fluctuate and change. To read the state, you use &lt;code&gt;this.state&lt;/code&gt;. To update it, you use &lt;code&gt;this.setState()&lt;/code&gt;. Every time &lt;code&gt;this.setState()&lt;/code&gt; is called, React updates the state, calculates a diff between the previous state and the new state, and injects a set of changes to the DOM on the page. This results a fast and efficient updates to your UI.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;The common convention is to initialize state with all your attributes empty in &lt;code&gt;getInitialState&lt;/code&gt;. Then you lookup data from the server using &lt;code&gt;componentDidMount&lt;/code&gt; and populate your attributes. From there on, updates can be driven by user action or other events.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;&lt;strong&gt;Properties&lt;/strong&gt; encompass data that is passed into the component. Properties do NOT change but are instead fixed values. To set them, you assign them to attributes when creating a new component and you&amp;#8217;ll soon see.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="admonitionblock warning"&gt;&#xD;
&lt;table&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="icon"&gt;&#xD;
&lt;div class="title"&gt;Warning&lt;/div&gt;&#xD;
&lt;/td&gt;&#xD;
&lt;td class="content"&gt;&#xD;
JavaScript doesn&amp;#8217;t lock down data structures like other languages. You can try to subvert properties by assigning values, but this doesn&amp;#8217;t work with React&amp;#8217;s differential engine and should be avoided.&#xD;
&lt;/td&gt;&#xD;
&lt;/tr&gt;&#xD;
&lt;/table&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;In this code, the function loads data via &lt;code&gt;client&lt;/code&gt;, a &lt;a href="https://promisesaplus.com/"&gt;Promise compliant&lt;/a&gt; instance of rest.js. When it is done retrieving from &lt;code&gt;/api/employees&lt;/code&gt;, it then invokes the function inside &lt;code&gt;done()&lt;/code&gt; and set&amp;#8217;s the state based on it&amp;#8217;s HAL document (&lt;code&gt;response.entity._embedded.employees&lt;/code&gt;). You might remember the structure of &lt;code&gt;curl /api/employees&lt;/code&gt; &lt;a href="#_touring_your_rest_service"&gt;earlier&lt;/a&gt; and see how it maps onto this structure.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;When the state is updated, the &lt;code&gt;render()&lt;/code&gt; function is invoked by the framework. The employee state data is included in creation of the &lt;code&gt;&amp;lt;EmployeeList /&amp;gt;&lt;/code&gt; React component as an input parameter.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Below is the definition for an &lt;code&gt;EmployeeList&lt;/code&gt;.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="title"&gt;src/main/resources/static/app.jsx - EmployeeList component&lt;/div&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;var EmployeeList = React.createClass({&#xD;
    render: function () {&#xD;
        var employees = this.props.employees.map(employee =&amp;gt;&#xD;
            &amp;lt;Employee key={employee._links.self.href} employee={employee}/&amp;gt;&#xD;
        );&#xD;
        return (&#xD;
            &amp;lt;table&amp;gt;&#xD;
                &amp;lt;tr&amp;gt;&#xD;
                    &amp;lt;th&amp;gt;First Name&amp;lt;/th&amp;gt;&#xD;
                    &amp;lt;th&amp;gt;Last Name&amp;lt;/th&amp;gt;&#xD;
                    &amp;lt;th&amp;gt;Description&amp;lt;/th&amp;gt;&#xD;
                &amp;lt;/tr&amp;gt;&#xD;
                {employees}&#xD;
            &amp;lt;/table&amp;gt;&#xD;
        )&#xD;
    }&#xD;
})&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Using JavaScript&amp;#8217;s map function, &lt;code&gt;this.props.employees&lt;/code&gt; is transformed from an array of employee records into an array of &lt;code&gt;&amp;lt;Element /&amp;gt;&lt;/code&gt; React components (which you&amp;#8217;ll see a little further down).&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&amp;lt;Employee key={employee._links.self.href} data={employee} /&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;This shows a new React component (note the uppercase format) being created along with two properties: &lt;strong&gt;key&lt;/strong&gt; and &lt;strong&gt;data&lt;/strong&gt;. These are supplied the values from &lt;code&gt;employee._links.self.href&lt;/code&gt; and &lt;code&gt;employee&lt;/code&gt;.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="admonitionblock important"&gt;&#xD;
&lt;table&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="icon"&gt;&#xD;
&lt;div class="title"&gt;Important&lt;/div&gt;&#xD;
&lt;/td&gt;&#xD;
&lt;td class="content"&gt;&#xD;
Whenever you work with Spring Data REST, the &lt;strong&gt;self&lt;/strong&gt; link IS the key for a given resource. React needs a unique identifer for child nodes, and &lt;code&gt;_links.self.href&lt;/code&gt; is perfect.&#xD;
&lt;/td&gt;&#xD;
&lt;/tr&gt;&#xD;
&lt;/table&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Finally, you return an HTML table wrapped around the array of &lt;code&gt;employees&lt;/code&gt; built with mapping.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-html" data-lang="html"&gt;&amp;lt;table&amp;gt;&#xD;
    &amp;lt;tr&amp;gt;&#xD;
        &amp;lt;th&amp;gt;First Name&amp;lt;/th&amp;gt;&#xD;
        &amp;lt;th&amp;gt;Last Name&amp;lt;/th&amp;gt;&#xD;
        &amp;lt;th&amp;gt;Description&amp;lt;/th&amp;gt;&#xD;
    &amp;lt;/tr&amp;gt;&#xD;
    {employees}&#xD;
&amp;lt;/table&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;This simple layout of state, properties, and HTML shows how React lets you declaritively create a simple and easy-to-understand component.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div id="NOTE" class="exampleblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Does this code contain both HTML &lt;em&gt;and&lt;/em&gt; JavaScript? Yes. If you noticed the file extension, this is &lt;a href="https://facebook.github.io/jsx/"&gt;JSX&lt;/a&gt;. There is no requirement to use it. React can be written using pure JavaScript, but the JSX syntax is quite terse.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;JSX also includes bits and pieces of &lt;a href="http://es6-features.org/#Constants"&gt;ES6&lt;/a&gt;. The one used in the code is the &lt;a href="http://es6-features.org/#ExpressionBodies"&gt;arrow function&lt;/a&gt;. It avoids creating a nested function() with its own scoped &lt;strong&gt;this&lt;/strong&gt;, and avoids needing a &lt;a href="http://stackoverflow.com/a/962040/28214"&gt;&lt;strong&gt;self&lt;/strong&gt; variable&lt;/a&gt;.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Worried about mixing logic with your structure? React&amp;#8217;s APIs encourage nice, declarative structure combined with state and properties. Instead of mixing a bunch of unrelated JavaScript and HTML, React encourages building simple components with small bits of related state and properties that work well together. It lets you look at a single component and understand the design. Then they are easy to combine together for bigger structures.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Next, you need to actually define what an &lt;code&gt;&amp;lt;Employee /&amp;gt;&lt;/code&gt; is.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="title"&gt;src/main/resources/static/app.jsx - Employee component&lt;/div&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;var Employee = React.createClass({&#xD;
    render: function () {&#xD;
        return (&#xD;
            &amp;lt;tr&amp;gt;&#xD;
                &amp;lt;td&amp;gt;{this.props.employee.firstName}&amp;lt;/td&amp;gt;&#xD;
                &amp;lt;td&amp;gt;{this.props.employee.lastName}&amp;lt;/td&amp;gt;&#xD;
                &amp;lt;td&amp;gt;{this.props.employee.description}&amp;lt;/td&amp;gt;&#xD;
            &amp;lt;/tr&amp;gt;&#xD;
        )&#xD;
    }&#xD;
})&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;This component is very simple. It has a single HTML table row wrapped around the employee&amp;#8217;s three properties. The property itself is &lt;code&gt;this.props.employee&lt;/code&gt;. Notice how passing in a JavaScript object makes it easy to pass along data fetched from the server?&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Because this component doesn&amp;#8217;t manage any state nor does it deal with user input, there is nothing else to do. This might tempt you to cram it into the &lt;code&gt;&amp;lt;EmployeeList /&amp;gt;&lt;/code&gt; up above. Don&amp;#8217;t do it! Instead, splitting your app up into small components that each do one job will make it easier to build up functionality in the future.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;The last step is to render the whole thing.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="title"&gt;src/main/resources/static/app.jsx - rendering code&lt;/div&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre class="highlight"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;React.render(&#xD;
    &amp;lt;App /&amp;gt;,&#xD;
    document.getElementById('react')&#xD;
)&lt;/code&gt;&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;&lt;code&gt;React.render()&lt;/code&gt; accepts two arguments: a React component you defined as well as a DOM node to inject it into. Remember how you saw the &lt;code&gt;&amp;lt;div id="react"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; item earlier from the HTML page? This is where it gets picked up and plugged in.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;With all this in place, re-run the application (&lt;code&gt;./mvnw spring-boot:run&lt;/code&gt;) and visit &lt;a href="http://localhost:8080" class="bare"&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="imageblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;img src="https://github.com/gregturn/react-and-spring-data-rest/raw/master/basic/images/basic-1.png" alt="basic 1"&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;You can see the initial employee loaded up by the system.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Remember using cURL to create new entries? Do that again.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="listingblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;pre&gt;curl -X POST localhost:8080/api/employees -d '{"firstName": "Bilbo", "lastName": "Baggins", "description": "burglar"}' -H 'Content-Type:application/json'&lt;/pre&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Refresh the browser, and you should see the new entry:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="imageblock"&gt;&#xD;
&lt;div class="content"&gt;&#xD;
&lt;img src="https://github.com/gregturn/react-and-spring-data-rest/raw/master/basic/images/basic-2.png" alt="basic 2"&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;And now you can see both of them listed on the web site.&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;
&lt;div class="sect1"&gt;&#xD;
&lt;h2 id="_review"&gt;Review&lt;/h2&gt;&#xD;
&lt;div class="sectionbody"&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;In this session:&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="ulist"&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;You defined a domain object and a corresponding repository.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;You let Spring Data REST export it with full blown hypermedia controls.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;You created two simple React components in a parent-child relationship.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;You fetched server data and rendered them in as a simple, static HTML structure.&#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;Issues?&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="ulist"&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;The web page wasn&amp;#8217;t dynamic. You had to refresh the browser to fetch new records.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;The web page didn&amp;#8217;t use any hypermedia controls or metadata. Instead, it was hardcoded to fetch data from &lt;code&gt;/api/employees&lt;/code&gt;.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;It&amp;#8217;s read only. While you can alter records using cURL, the web page offers none of that.&#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;div class="paragraph"&gt;&#xD;
&lt;p&gt;These are things we can address in the next session. Until then, happy coding!&lt;/p&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - August 25th, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/08/25/this-week-in-spring-august-25th-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-08-25:2219</id>
    <updated>2015-08-25T21:22:14Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I&amp;rsquo;m in Rio de Janeiro, Brazil for the lovely QCon Rio conference, and then I&amp;rsquo;m off to Tokyo, Japan for a &lt;em&gt;Spring in Summer&lt;/em&gt; conference for local Spring users!&lt;/p&gt;&lt;p&gt;The team is abuzz with excitement leading up to this year&amp;rsquo;s SpringOne2GX 2016, the biggest and best SpringOne2GX, ever! This year, you&amp;rsquo;re going to see us do &lt;em&gt;WAY&lt;/em&gt; more with &lt;em&gt;WAY&lt;/em&gt; less and get it to production, to boot! This is exciting for everyone of us and it will be for audience members, as well!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;our pal Kenny Bastani put together a followup post &lt;a href="http://www.kennybastani.com/2015/08/polyglot-persistence-spring-cloud-docker.html"&gt;in his series on Spring Cloud about polyglot persistence with Spring Cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2015/08/20/spring-for-apache-hadoop-2-3-milestone-2-released"&gt;Spring for Hadoop lead Thomas Risberg just announced 2.3M2&lt;/a&gt;, complete with support for running batch tasklets, improved Spring Boot integration, and improved YARN support&lt;/li&gt;
  &lt;li&gt;Singaporean Guest bloggers Han Lim and Tony Nguyen have written up a &lt;em&gt;very&lt;/em&gt; cool blog on &lt;a href="https://spring.io/blog/2015/08/19/migrating-a-spring-web-mvc-application-from-jsp-to-angularjs"&gt;migrating from &lt;code&gt;.jsp&lt;/code&gt;-based applications to Angular.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;John Thompson has a nice &lt;a href="https://dzone.com/articles/spring-boot-example-of-spring-integration-and-acti"&gt;post on using Spring Boot with ActiveMQ over on DZone&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Saravanan Subramanian has a &lt;a href="https://dzone.com/articles/getting-started-with-rabbitmq-cloud-based-message"&gt;nice post on getting started with RabbitMQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Kathy Thomas has a written up and shared a presentation on building a &lt;a href="https://dzone.com/articles/building-your-own-cloud-with-suse-openstack-and-st"&gt;custom PaaS with SUSE OpenStack and Stackato Cloud Foundry &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Our pal Nicolas Frankel has a nice &lt;a href="http://blog.frankel.ch/more-devops-for-spring-boot"&gt;post on introducting more devops-friendly features with Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I liked this blog on &lt;a href="https://dzone.com/articles/set-up-a-springdata-project-using-apache-cassandra"&gt;using Spring Data Cassandra&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is a good French language post on &lt;a href="http://soat.developpez.com/tutoriels/spring/automatiser-execution-tache-scheduler/"&gt;using Spring Batch to run jobs, in lieu of CRON&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Neo4j have just announced &lt;a href="http://neo4j.com/blog/spring-data-neo4j-4-0-0-rc2-release/"&gt;Spring Data Neo4j 4.0.0.RC2 is available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Make sure you didn&amp;rsquo;t &lt;a href="https://www.youtube.com/watch?v=A1UbUNcveik&amp;feature=youtu.be"&gt;miss the latest installment of &lt;em&gt;Cloud Foundry After Dark&lt;/em&gt;&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring for Apache Hadoop 2.3 Milestone 2 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/08/20/spring-for-apache-hadoop-2-3-milestone-2-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Thomas Risberg</name>
    </author>
    <id>tag:spring.io,2015-08-20:2216</id>
    <updated>2015-08-20T14:03:00Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce the Spring for Apache Hadoop 2.3 M2 milestone release.&lt;/p&gt;&lt;p&gt;The most important enhancements in this release: &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;New batch tasklets: Support for running a simple Spark app [&lt;a href="https://jira.spring.io/browse/SHDP-397"&gt;SHDP-397&lt;/a&gt;] and for running a simple Sqoop2 Job [&lt;a href="https://jira.spring.io/browse/SHDP-506"&gt;SHDP-506&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;Better boot support: Add jobHistoryAddress to SpringHadoopProperties for Boot configuration [&lt;a href="https://jira.spring.io/browse/SHDP-517"&gt;SHDP-517&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;YARN: Support dots in yarn container group names [&lt;a href="https://jira.spring.io/browse/SHDP-515"&gt;SHDP-515&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;See the release &lt;a href="http://docs.spring.io/spring-hadoop/docs/2.3.0.M2/changelog.txt"&gt;changelog&lt;/a&gt; for details.&lt;/p&gt;&lt;p&gt;The new support for running a Spark job on YARN via a Spring Batch tasklet opens possibilities for integrating Spark tasks in a larger Spring Batch flow We will show a simple example of this at the upcoming &lt;a href="http://springone2gx.com/"&gt;SpringOne 2GX&lt;/a&gt; conference during our &lt;a href="https://2015.event.springone2gx.com/schedule/sessions/hadoop_workflows_and_distributed_yarn_apps_using_spring_technologies.html"&gt;&amp;ldquo;Hadoop Workflows and Distributed YARN Apps using Spring technologies&amp;rdquo;&lt;/a&gt; presentation. In this presentation we&amp;rsquo;ll also explore how Hadoop based apps can take advantage of a cloud-native development approach.&lt;/p&gt;&lt;p&gt;We continue to provide version specific artifacts with their respective transitive dependencies in the Spring IO milestone repository:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;2.3.0.M2 (default - Apache Hadoop stable 2.7.1)&lt;/li&gt;
  &lt;li&gt;2.3.0.M2-hadoop26 (Apache Hadoop 2.6.0)&lt;/li&gt;
  &lt;li&gt;2.3.0.M2-phd30 (Pivotal HD 3.0)&lt;/li&gt;
  &lt;li&gt;2.3.0.M2-cdh5 (Cloudera CDH 5.4)&lt;/li&gt;
  &lt;li&gt;2.3.0.M2-hdp23 (Hortonworks HDP 2.3)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Please provide feedback so we can prioritize the work on new features scheduled for 2.3 (see previous &lt;a href="https://spring.io/blog/2015/05/21/spring-for-apache-hadoop-2-2-rc1-released"&gt;blog post&lt;/a&gt; for a list) and any additional feature requests. You can use JIRA issues or GitHub issues (see project page for links).&lt;/p&gt;&lt;p&gt;The project page is at - &lt;a href="http://projects.spring.io/spring-hadoop/"&gt;http://projects.spring.io/spring-hadoop/&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
</feed>
